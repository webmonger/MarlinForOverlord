#include "Configuration.h"
#include "pins.h"
#include "UltiLCD2_low_lib.h"
#include <compat/twi.h>


#ifdef ENABLE_ULTILCD2
/**
 * Implementation of the LCD display routines for a SSD1309 OLED graphical display connected with i2c.
 **/
#define LCD_GFX_WIDTH 128
#define LCD_GFX_HEIGHT 64

#define LCD_RESET_PIN 5
//#define LCD_CS_PIN    6
#define I2C_SDA_PIN   20
#define I2C_SCL_PIN   21

#define I2C_FREQ 400000

//The TWI interrupt routine conflicts with an interrupt already defined by Arduino, if you are using the Arduino IDE.
// Not running the screen update from interrupts causes a 25ms delay each screen refresh. Which will cause issues during printing.
// I recommend against using the Arduino IDE and setup a proper development environment.
#define USE_TWI_INTERRUPT 1

#define I2C_WRITE   0x00
#define I2C_READ    0x01

#define I2C_LED_ADDRESS 0b1100000

#define I2C_LCD_ADDRESS 0b0111100
#define I2C_LCD_SEND_COMMAND 0x00
#define I2C_LCD_SEND_DATA    0x40

#define LCD_COMMAND_CONTRAST                0x81
#define LCD_COMMAND_FULL_DISPLAY_ON_DISABLE 0xA4
#define LCD_COMMAND_FULL_DISPLAY_ON_ENABLE  0xA5
#define LCD_COMMAND_INVERT_DISABLE          0xA6
#define LCD_COMMAND_INVERT_ENABLE           0xA7
#define LCD_COMMAND_DISPLAY_OFF             0xAE
#define LCD_COMMAND_DISPLAY_ON              0xAF
#define LCD_COMMAND_NOP                     0xE3
#define LCD_COMMAND_LOCK_COMMANDS           0xDF

#define LCD_COMMAND_SET_ADDRESSING_MODE     0x20

/** Backbuffer for LCD */
uint8_t lcd_buffer[LCD_GFX_WIDTH * LCD_GFX_HEIGHT / 8];
uint8_t led_r, led_g, led_b;
const char* languagePointer[LANGUAGE_NUMBER];
int16_t languageOffsetX[LANGUAGE_NUMBER];
int16_t languageOffsetY[LANGUAGE_NUMBER];

#define LcdUpdateNormal 0
#define LcdUpdateError 1
#define LcdUpdateWaiting 2
#define LcdUpdateErrorInInterrupt 3

//boolean iicdebug=false;
static volatile uint8_t lcd_update_state=LcdUpdateNormal;
static volatile uint16_t lcd_update_pos = 0;

#define beepTypeNone   0
#define beepTypePress   1
#define beepTypeNormal    2

uint8_t beepType=beepTypeNone;


FORCE_INLINE static void i2c_end()
{
    uint8_t i2cTimeOut=0;
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    while (TWCR&(1<<TWSTO)){
        if (i2cTimeOut++==200) {
            SERIAL_DEBUGLNPGM("i2c TimeOut");
            lcd_update_state=LcdUpdateError;
            TWCR=0;
            break;
        }
    }
    delayMicroseconds(1);
}

void lcd_lib_i2c_stop()
{
  i2c_end();
  delayMicroseconds(1);
}


FORCE_INLINE static void i2c_end_normal()
{
    uint8_t i2cTimeOut=0;
    if ((TWSR & 0xF8 )== TW_MT_DATA_ACK) {
        TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
        while (TWCR&(1<<TWSTO)){
            if (i2cTimeOut++==200) {
                SERIAL_DEBUGLNPGM("i2c TimeOut");
                lcd_update_state=LcdUpdateError;
                TWCR=0;
                break;
            }
        }
    }
    else{
        lcd_update_state=LcdUpdateError;
        SERIAL_DEBUGLNPGM("not normal end");
        SERIAL_DEBUGLN(TWSR & 0xF8);
    }
    delayMicroseconds(1);
}


uint8_t lcdVersion=0;

FORCE_INLINE static boolean i2c_start_address(uint8_t data)
{
    uint8_t i2cTimeOut=0;
    
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    i2cTimeOut=0;
    while (!(TWCR & (1<<TWINT))){
        if (i2cTimeOut++==200) {
            SERIAL_DEBUGLNPGM("i2c TimeOut");
            lcd_update_state=LcdUpdateError;
            TWCR=0;
            break;
        }
    }
    switch (TWSR & 0xF8) {
        case TW_REP_START:
          delayMicroseconds(1);
            SERIAL_DEBUGLNPGM("i2c start TW_REP_START");
        case TW_START:
        {
            TWDR = data;
            TWCR = (1<<TWINT) | (1<<TWEN);
            i2cTimeOut=0;
            while (!(TWCR & (1<<TWINT))){
                if (i2cTimeOut++==200) {
                    lcd_update_state=LcdUpdateError;
                    SERIAL_DEBUGLNPGM("i2c TimeOut");
                    SERIAL_DEBUGLNPGM("TW_START");
                    TWCR=0;
                    break;
                }
            }
            switch (TWSR & 0xF8) {
                case TW_MT_SLA_ACK:
                    return true;
                    break;
                case TW_MT_SLA_NACK:
                    lcd_update_state=LcdUpdateError;
                    SERIAL_DEBUGLNPGM("iic address error");
                    SERIAL_DEBUGLNPGM("TW_MT_SLA_NACK");
                    i2c_end();
                    break;
                case TW_BUS_ERROR:
                {
                    lcd_update_state=LcdUpdateError;
                    SERIAL_DEBUGLNPGM("iic address error");
                    SERIAL_DEBUGLNPGM("TW_BUS_ERROR");
                    SERIAL_DEBUGLN(TWSR & 0xF8);
                    i2c_end();
                    return false;
                }
                    break;
                    
                case TW_MR_SLA_ACK:
                    SERIAL_DEBUGLNPGM("into TW_MR_SLA_ACK");
        
                    delayMicroseconds(100);
                    
                    TWCR = (1<<TWINT) | (1<<TWEN);
                    i2cTimeOut=0;
                    while (!(TWCR & (1<<TWINT))){
                        if (i2cTimeOut++==200) {
                            lcd_update_state=LcdUpdateError;
                            SERIAL_DEBUGLNPGM("i2c TimeOut");
                            SERIAL_DEBUGLNPGM("TW_MR_SLA_ACK");
                            TWCR=0;
                            break;
                        }
                    }
                    
                    if ((TWSR & 0xF8) == TW_MR_DATA_NACK) {
                        lcdVersion=TWDR;
                        SERIAL_DEBUGLNPGM("lcdVer");
                        SERIAL_DEBUGLN((int)lcdVersion);
                        return true;
                    }
                    else{
                        lcd_update_state=LcdUpdateError;
                        SERIAL_DEBUGLNPGM("i2c TW_MR_DATA_NACK");
                    }
                    break;
                    
                case TW_MR_SLA_NACK:
                    lcd_update_state=LcdUpdateError;
                    SERIAL_DEBUGLNPGM("iic address error");
                    SERIAL_DEBUGLNPGM("TW_MR_SLA_NACK");
                    i2c_end();
                    break;
                    
                case TW_MR_ARB_LOST:
                {
                    lcd_update_state=LcdUpdateError;
                    SERIAL_DEBUGLNPGM("iic address error");
                    SERIAL_DEBUGLNPGM("TW_MR_ARB_LOST");
                    SERIAL_DEBUGLN(TWSR & 0xF8);
                    TWCR = (1<<TWINT)|(1<<TWEN);
                    return false;
                    break;
                }
                default:
                    lcd_update_state=LcdUpdateError;
                    SERIAL_DEBUGLNPGM("iic address error");
                    SERIAL_DEBUGLNPGM("default");
                    SERIAL_DEBUGLN(TWSR & 0xF8);
                    break;
            }
        }
            break;
        case TW_BUS_ERROR:
        {
            SERIAL_DEBUGLNPGM("iic start error");
            SERIAL_DEBUGLNPGM("TW_BUS_ERROR");
            lcd_update_state=LcdUpdateError;
            i2c_end();
            return false;
        }
            break;
        case TW_MR_ARB_LOST:
        {
            SERIAL_DEBUGLNPGM("iic start error");
            SERIAL_DEBUGLNPGM("TW_MR_ARB_LOST");
            lcd_update_state=LcdUpdateError;
            TWCR = (1<<TWINT)|(1<<TWEN);
            return false;
        }
            break;
        default:
            lcd_update_state=LcdUpdateError;
            SERIAL_DEBUGLNPGM("iic start error");
            SERIAL_DEBUGLNPGM("default");
            SERIAL_DEBUGLN(TWSR & 0xF8);
            break;
    }
    lcd_update_state=LcdUpdateError;
    delayMicroseconds(1);
    return false;
}





FORCE_INLINE static void i2c_send_data(uint8_t data)
{
    uint8_t i2cTimeOut=0;
    TWDR = data;
    TWCR = (1<<TWINT) | (1<<TWEN);
    i2cTimeOut=0;
    while (!(TWCR & (1<<TWINT))){
        if (i2cTimeOut++==200) {
            SERIAL_DEBUGLNPGM("i2cTimeOut");
            SERIAL_DEBUGLNPGM("data");
            TWCR=0;
            lcd_update_state=LcdUpdateError;
            break;
        }
    }
    switch (TWSR & 0xF8) {
        case TW_MT_DATA_ACK:
            break;
        case TW_MR_ARB_LOST:
            SERIAL_DEBUGLNPGM("iic data error");
            SERIAL_DEBUGLNPGM("TW_MR_ARB_LOST");
            SERIAL_DEBUGLN(TWSR & 0xF8);
            TWCR = (1<<TWINT)|(1<<TWEN);
            lcd_update_state=LcdUpdateError;
            break;
        default:
            SERIAL_DEBUGLNPGM("iic data error");
            SERIAL_DEBUGLNPGM("default");
            SERIAL_DEBUGLN(TWSR & 0xF8);
            i2c_end();
            lcd_update_state=LcdUpdateError;
            break;
    }
    delayMicroseconds(1);
}

//void lcd_lib_set_contrast(uint8_t theContrast)
//{
//    if (!lcd_lib_update_ready()) return;
//    
//    uint16_t extendContrast=(uint16_t)theContrast+(uint16_t)theContrast/2;
//    
//        i2c_start();
//        i2c_send_address(I2C_LCD_ADDRESS << 1 | I2C_WRITE);
//        i2c_send_data(I2C_LCD_SEND_COMMAND);
//    if (extendContrast>335) {
//        i2c_send_data(LCD_COMMAND_CONTRAST);
//        i2c_send_data(0xFF);
//        i2c_send_data(0xDB);
//        i2c_send_data(0x3C);
//    }
//    else if (extendContrast>110) {
//        i2c_send_data(LCD_COMMAND_CONTRAST);
//        i2c_send_data(extendContrast-110);
//        i2c_send_data(0xDB);
//        i2c_send_data(0x3C);
//    }
//    else if (extendContrast>75){
//        i2c_send_data(LCD_COMMAND_CONTRAST);
//        i2c_send_data(extendContrast-75);
//        i2c_send_data(0xDB);
//        i2c_send_data(0x34);
//    }
//    else{
//        i2c_send_data(LCD_COMMAND_CONTRAST);
//        i2c_send_data(extendContrast);
//        i2c_send_data(0xDB);
//        i2c_send_data(0x00);
//    }
//        i2c_end();
//}



void lcd_lib_oled_off(){
  if (i2c_start_address((I2C_LCD_ADDRESS << 1) | I2C_WRITE)) {
    i2c_send_data(I2C_LCD_SEND_COMMAND);
    i2c_send_data(LCD_COMMAND_DISPLAY_OFF);
    //    i2c_send_data(LCD_COMMAND_CONTRAST);
    //    i2c_send_data(0x01);
    //    i2c_send_data(0xDB);
    //    i2c_send_data(0x00);
    i2c_end_normal();
  }
}

void lcd_lib_oled_on(){
  if (i2c_start_address((I2C_LCD_ADDRESS << 1) | I2C_WRITE)) {
    i2c_send_data(I2C_LCD_SEND_COMMAND);
    i2c_send_data(LCD_COMMAND_DISPLAY_ON);
    i2c_end_normal();
  }
}

void lcd_lib_oled_reset(){
    WRITE(LCD_RESET_PIN, 0);
    _delay_ms(5);
    WRITE(LCD_RESET_PIN, 1);
    _delay_ms(5);
    
    TWBR = ((F_CPU / I2C_FREQ) - 16)/2*1;
    TWSR = 0x00;

    delayMicroseconds(10);

    if (i2c_start_address((I2C_LCD_ADDRESS << 1) | I2C_WRITE)) {
      i2c_send_data(LCD_COMMAND_DISPLAY_OFF);
      i2c_end_normal();
    }


    if (i2c_start_address((I2C_LED_ADDRESS << 1) | I2C_READ)) {
        SERIAL_DEBUGLN("i2c read success");
        i2c_end();
    }
    
    delayMicroseconds(100);
    
    if (i2c_start_address((I2C_LED_ADDRESS << 1) | I2C_READ)) {
        SERIAL_DEBUGLN("i2c read success");
        i2c_end();
    }
    
    delayMicroseconds(100);
    
    if (i2c_start_address((I2C_LCD_ADDRESS << 1) | I2C_WRITE)) {
        i2c_send_data(I2C_LCD_SEND_COMMAND);
        
        i2c_send_data(LCD_COMMAND_LOCK_COMMANDS);
        i2c_send_data(0x12);
        
        i2c_send_data(LCD_COMMAND_DISPLAY_OFF);
        
        i2c_send_data(0xD5);//Display clock divider/freq
        //    i2c_send_raw(0xA0);
        i2c_send_data(0xF0);
        
        i2c_send_data(0xA8);//Multiplex ratio
        i2c_send_data(0x3F);
        
        i2c_send_data(0xD3);//Display offset
        i2c_send_data(0x00);
        
        i2c_send_data(0x40);//Set start line
        
        i2c_send_data(0xA1);//Segment remap
        
        i2c_send_data(0xC8);//COM scan output direction
        
        i2c_send_data(0xDA);//COM pins hardware configuration
        i2c_send_data(0x12);
        
        i2c_send_data(LCD_COMMAND_CONTRAST);
        //    i2c_send_raw(0xDF);
        i2c_send_data(0xFF);
        
        i2c_send_data(0xD9);//Pre charge period
        //    i2c_send_raw(0x82);
        i2c_send_data(0xF1);
        
        
        i2c_send_data(0xDB);//VCOMH Deslect level
        //    i2c_send_raw(0x34);
        i2c_send_data(0x3C);
        
        i2c_send_data(LCD_COMMAND_SET_ADDRESSING_MODE);
        i2c_send_data(0x00);
        
        i2c_send_data(0x22);
        i2c_send_data(0x00);
        i2c_send_data(0x07);
        
        if (lcdVersion == 10) {
            i2c_send_data(0x21);
            i2c_send_data(0x02);
            i2c_send_data(0x81);
        }
        else{
            i2c_send_data(0x21);
            i2c_send_data(0x00);
            i2c_send_data(0x7f);
        }
        
        i2c_send_data(LCD_COMMAND_FULL_DISPLAY_ON_DISABLE);
        
        i2c_send_data(LCD_COMMAND_DISPLAY_ON);
        
        i2c_end_normal();
    }
}

void lcd_lib_init()
{
//    SET_OUTPUT(LCD_CS_PIN);
    SET_OUTPUT(LCD_RESET_PIN);

    SET_OUTPUT(I2C_SDA_PIN);
    SET_OUTPUT(I2C_SCL_PIN);

    //Set the beeper as output.
//    SET_OUTPUT(BEEPER);
  
    //Set the encoder bits and encoder button as inputs with pullup
  SET_INPUT(PushButtonUp);
  SET_INPUT(PushButtonEnter);
  SET_INPUT(PushButtonDown);
  WRITE(PushButtonUp, 1);
  WRITE(PushButtonEnter, 1);
  WRITE(PushButtonDown, 1);

    SET_INPUT(SDCARDDETECT);
    WRITE(SDCARDDETECT, HIGH);

//    WRITE(LCD_CS_PIN, 0);
    WRITE(I2C_SDA_PIN, 1);
    WRITE(I2C_SCL_PIN, 1);

    lcd_lib_oled_reset();

  lcd_update_pos=0;
  lcd_update_state=LcdUpdateNormal;

    lcd_lib_buttons_update_interrupt();
    lcd_lib_buttons_update();
    lcd_lib_encoder_pos = 0;
    lcd_lib_update_screen();
}

#if USE_TWI_INTERRUPT
ISR(TWI_vect)
{
    
    switch (TWSR & 0xF8) {
        case TW_MT_DATA_ACK:
            if (lcd_update_pos == LCD_GFX_WIDTH*LCD_GFX_HEIGHT/8)
            {
                lcd_update_pos=0;
                i2c_end();
            }else{
                
                TWDR = lcd_buffer[lcd_update_pos];
                TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
                lcd_update_pos++;
            }
            break;
        case TW_MR_ARB_LOST:
            lcd_update_state=LcdUpdateErrorInInterrupt;
            TWCR = (1<<TWINT)|(1<<TWEN);
            break;
        default:
            lcd_update_state=LcdUpdateErrorInInterrupt;
            i2c_end();
            break;
    }
}
#endif

void lcd_lib_RGB_off(){
  if (i2c_start_address((I2C_LED_ADDRESS << 1) | I2C_WRITE)) {
    i2c_send_data(2);
    i2c_send_data(0);
    i2c_send_data(3);
    i2c_send_data(0);
    i2c_send_data(4);
    i2c_send_data(0);
    i2c_send_data(9);
    i2c_send_data(3);
    i2c_end_normal();
  }
}

void lcd_lib_update_screen()
{
    static unsigned long lcdUpdatePosDelayTimer;
    
    if (lcd_update_state==LcdUpdateError) {
        SERIAL_DEBUGLNPGM("LcdUpdateError");
        lcd_update_state=LcdUpdateWaiting;
        
        lcdUpdatePosDelayTimer=millis();
    }
    
    if (lcd_update_state==LcdUpdateErrorInInterrupt) {
        SERIAL_DEBUGLNPGM("LcdUpdateErrorInInterrupt");
        lcd_update_state=LcdUpdateWaiting;
        
        lcdUpdatePosDelayTimer=millis();
    }
  
    
    if (lcd_update_state==LcdUpdateWaiting && millis()-lcdUpdatePosDelayTimer>500) {
        SERIAL_DEBUGLNPGM("LcdUpdateWaiting");
        
        lcd_lib_oled_reset();
        
        if (lcd_update_state==LcdUpdateWaiting) {
            lcd_update_pos=0;
            lcd_update_state=LcdUpdateNormal;
            SERIAL_DEBUGLNPGM("LcdUpdateNormal");
        }
        
    }
    
    
    if (lcd_update_state==LcdUpdateNormal) {
        
        if (i2c_start_address((I2C_LED_ADDRESS << 1) | I2C_WRITE)) {
            i2c_send_data(2);
            i2c_send_data(led_g);
            i2c_send_data(3);
            i2c_send_data(led_r);
            i2c_send_data(4);
            i2c_send_data(led_b);

          switch (beepType) {
            case beepTypeNormal:
              i2c_send_data(9);
              i2c_send_data(0);
              beepType=beepTypeNone;
              break;
            case beepTypePress:
              i2c_send_data(9);
              i2c_send_data(2);
              beepType=beepTypeNone;
              break;
            default:
              i2c_send_data(9);
              i2c_send_data(3);
              beepType=beepTypeNone;
              break;
          }
            i2c_end_normal();
        }
        
        if (i2c_start_address((I2C_LCD_ADDRESS << 1) | I2C_WRITE)) {
            TWDR = I2C_LCD_SEND_DATA;
            TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWIE);
        }
    }
}

bool lcd_lib_update_ready()
{
//#if USE_TWI_INTERRUPT
    return !(TWCR & _BV(TWIE));
//#else
//    return true;
//#endif
}

void lcd_lib_led_color(uint8_t r, uint8_t g, uint8_t b)
{
    led_r = r;
    led_g = g;
    led_b = b;
}


static const uint8_t lcd_font_chinese_alphabet[] PROGMEM ={
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",0*/

  0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"!",1*/

  0x00,0x06,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""",2*/

  0x88,0xFE,0x88,0xFE,0x88,0x00,0x00,0x03,0x00,0x03,0x00,0x00,/*"#",3*/

  0x0C,0x12,0xFF,0x42,0x84,0x00,0x01,0x02,0x07,0x02,0x01,0x00,/*"$",4*/

  0x18,0x24,0xD8,0xB0,0x4C,0x80,0x00,0x03,0x00,0x01,0x02,0x01,/*"%",5*/

  0xCC,0x32,0xD2,0x0C,0xC0,0x00,0x01,0x02,0x02,0x01,0x02,0x00,/*"&",6*/

  0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"'",7*/

  0x00,0x00,0xF8,0x06,0x01,0x00,0x00,0x00,0x00,0x03,0x04,0x00,/*"(",8*/

  0x00,0x01,0x06,0xF8,0x00,0x00,0x00,0x04,0x03,0x00,0x00,0x00,/*")",9*/

  0x20,0xA0,0x78,0xA0,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"*",10*/

  0x20,0x20,0xF8,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"+",11*/

  0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x06,0x00,0x00,0x00,0x00,/*",",12*/

  0x20,0x20,0x20,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",13*/

  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*".",14*/

  0x00,0x80,0x70,0x0E,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,/*"/",15*/

  0xFC,0x02,0x02,0x02,0xFC,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"0",16*/

  0x00,0x04,0xFE,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"1",17*/

  0x0C,0x82,0x42,0x22,0x1C,0x00,0x03,0x02,0x02,0x02,0x02,0x00,/*"2",18*/

  0x8C,0x02,0x22,0x22,0xDC,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"3",19*/

  0xC0,0xB0,0x8C,0xFE,0x80,0x00,0x00,0x00,0x00,0x03,0x00,0x00,/*"4",20*/

  0x3E,0x12,0x12,0x12,0xE2,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"5",21*/

  0xFC,0x12,0x12,0x12,0xE4,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"6",22*/

  0x06,0x02,0xC2,0x32,0x0E,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"7",23*/

  0xDC,0x22,0x22,0x22,0xDC,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"8",24*/

  0x3C,0x42,0x42,0x42,0xFC,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"9",25*/

  0x00,0x00,0x8C,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,/*":",26*/

  0x00,0x8C,0x00,0x00,0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x00,/*";",27*/

  0x20,0x50,0x88,0x04,0x02,0x00,0x00,0x00,0x00,0x01,0x02,0x00,/*"<",28*/

  0x90,0x90,0x90,0x90,0x90,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"=",29*/

  0x02,0x04,0x88,0x50,0x20,0x00,0x02,0x01,0x00,0x00,0x00,0x00,/*">",30*/

  0x04,0x02,0x62,0x12,0x0C,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"?",31*/

  0xFC,0x02,0xF2,0x8A,0xFC,0x00,0x01,0x02,0x02,0x02,0x00,0x00,/*"@",32*/

  0x80,0x78,0x46,0x78,0x80,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"A",33*/

  0xFE,0x22,0x22,0x22,0xDC,0x00,0x03,0x02,0x02,0x02,0x01,0x00,/*"B",34*/

  0xFC,0x02,0x02,0x02,0x8C,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"C",35*/

  0xFE,0x02,0x02,0x02,0xFC,0x00,0x03,0x02,0x02,0x02,0x01,0x00,/*"D",36*/

  0xFE,0x22,0x22,0x22,0x22,0x00,0x03,0x02,0x02,0x02,0x02,0x00,/*"E",37*/

  0xFE,0x22,0x22,0x22,0x02,0x00,0x03,0x00,0x00,0x00,0x00,0x00,/*"F",38*/

  0xFC,0x02,0x22,0x22,0xEC,0x00,0x01,0x02,0x02,0x01,0x03,0x00,/*"G",39*/

  0xFE,0x20,0x20,0x20,0xFE,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"H",40*/

  0x02,0x02,0xFE,0x02,0x02,0x00,0x02,0x02,0x03,0x02,0x02,0x00,/*"I",41*/

  0x80,0x00,0x00,0x00,0xFE,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"J",42*/

  0xFE,0x20,0x50,0x8C,0x02,0x00,0x03,0x00,0x00,0x01,0x02,0x00,/*"K",43*/

  0xFE,0x00,0x00,0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x02,0x00,/*"L",44*/

  0xFE,0x18,0x60,0x18,0xFE,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"M",45*/

  0xFE,0x0C,0x30,0xC0,0xFE,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"N",46*/

  0xFC,0x02,0x02,0x02,0xFC,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"O",47*/

  0xFE,0x22,0x22,0x22,0x1C,0x00,0x03,0x00,0x00,0x00,0x00,0x00,/*"P",48*/

  0xFC,0x02,0x02,0x02,0xFC,0x00,0x01,0x02,0x03,0x02,0x05,0x00,/*"Q",49*/

  0xFE,0x22,0x22,0x62,0x9C,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"R",50*/

  0x8C,0x12,0x22,0x42,0x8C,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"S",51*/

  0x02,0x02,0xFE,0x02,0x02,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"T",52*/

  0xFE,0x00,0x00,0x00,0xFE,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"U",53*/

  0x0E,0x70,0x80,0x70,0x0E,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"V",54*/

  0x7E,0x80,0x7E,0x80,0x7E,0x00,0x00,0x03,0x00,0x03,0x00,0x00,/*"W",55*/

  0x06,0xD8,0x20,0xD8,0x06,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"X",56*/

  0x0E,0x30,0xC0,0x30,0x0E,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"Y",57*/

  0x02,0xC2,0x22,0x1A,0x06,0x00,0x03,0x02,0x02,0x02,0x02,0x00,/*"Z",58*/

  0x00,0x00,0xFF,0x01,0x00,0x00,0x00,0x00,0x07,0x04,0x00,0x00,/*"[",59*/

  0x00,0x0E,0x70,0x80,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,/*"\",60*/

  0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x04,0x07,0x00,0x00,/*"]",61*/

  0x04,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^",62*/

  0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,/*"_",63*/

  0x00,0x0C,0x12,0x12,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`",64*/

  0x88,0x48,0x48,0x48,0xF0,0x00,0x01,0x02,0x02,0x02,0x03,0x00,/*"a",65*/

  0xFE,0x08,0x08,0x08,0xF0,0x00,0x03,0x02,0x02,0x02,0x01,0x00,/*"b",66*/

  0xF0,0x08,0x08,0x08,0x10,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"c",67*/

  0xF0,0x08,0x08,0x08,0xFE,0x00,0x01,0x02,0x02,0x02,0x03,0x00,/*"d",68*/

  0xF0,0x48,0x48,0x48,0x70,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"e",69*/

  0x10,0xFC,0x12,0x12,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,/*"f",70*/

  0x70,0x88,0x88,0x88,0xF8,0x00,0x02,0x04,0x04,0x04,0x03,0x00,/*"g",71*/

  0xFE,0x08,0x08,0x08,0xF0,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"h",72*/

  0x00,0x08,0xFA,0x00,0x00,0x00,0x00,0x02,0x03,0x02,0x00,0x00,/*"i",73*/

  0x00,0x08,0xFA,0x00,0x00,0x00,0x04,0x04,0x03,0x00,0x00,0x00,/*"j",74*/

  0xFE,0x40,0xA0,0x10,0x08,0x00,0x03,0x00,0x00,0x01,0x02,0x00,/*"k",75*/

  0x00,0x02,0xFE,0x00,0x00,0x00,0x00,0x02,0x03,0x02,0x00,0x00,/*"l",76*/

  0xF8,0x08,0xF0,0x08,0xF0,0x00,0x03,0x00,0x03,0x00,0x03,0x00,/*"m",77*/

  0xF8,0x08,0x08,0x08,0xF0,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"n",78*/

  0xF0,0x08,0x08,0x08,0xF0,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"o",79*/

  0xF8,0x08,0x08,0x08,0xF0,0x00,0x07,0x01,0x01,0x01,0x00,0x00,/*"p",80*/

  0xF0,0x08,0x08,0x08,0xF8,0x00,0x00,0x01,0x01,0x01,0x07,0x00,/*"q",81*/

  0x00,0xF8,0x10,0x08,0x08,0x00,0x00,0x03,0x00,0x00,0x00,0x00,/*"r",82*/

  0x30,0x48,0x48,0x48,0x90,0x00,0x01,0x02,0x02,0x02,0x01,0x00,/*"s",83*/

  0x08,0xFE,0x08,0x08,0x00,0x00,0x00,0x01,0x02,0x02,0x00,0x00,/*"t",84*/

  0xF8,0x00,0x00,0x00,0xF8,0x00,0x01,0x02,0x02,0x02,0x03,0x00,/*"u",85*/

  0x38,0xC0,0x00,0xC0,0x38,0x00,0x00,0x00,0x03,0x00,0x00,0x00,/*"v",86*/

  0x78,0x80,0xF8,0x80,0x78,0x00,0x00,0x03,0x00,0x03,0x00,0x00,/*"w",87*/

  0x18,0xA0,0x40,0xA0,0x18,0x00,0x03,0x00,0x00,0x00,0x03,0x00,/*"x",88*/

  0x38,0xC0,0x00,0xC0,0x38,0x00,0x04,0x04,0x03,0x00,0x00,0x00,/*"y",89*/

  0x08,0x88,0x48,0x28,0x18,0x00,0x03,0x02,0x02,0x02,0x02,0x00,/*"z",90*/

  0x00,0x00,0x20,0xDE,0x01,0x00,0x00,0x00,0x00,0x03,0x04,0x00,/*"{",91*/

  0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x0F,0x00,0x00,/*"|",92*/

  0x00,0x01,0xDE,0x20,0x00,0x00,0x00,0x04,0x03,0x00,0x00,0x00,/*"}",93*/


};


/*
错误停止运行最大温度小热床传感器加故障安全电流柱限位开关损坏卡住喷嘴保护联系使用串口打印跳过正在启动请等待忽略蓝牙连接成功欢迎体验中模型维修继续有一个不常售后主菜单上机源或者掉取消默认进入初始设置按下键提示建议环境备头并软化周围残余的材料会降轻触平台来校准步将削尖耗插导管觉到挤出齿轮咬合当观察从畅地吐好了吧随配送读选择要然换更调您想自程序吗手此伴滋声向节与距离达理效果操作于本返回级风扇转速高低未知复退慢缩检测能闭长恢厂状态固件版编号完池充满量寿命时间部结束被构处移率参数存名称线径找可识别文定义改辅助为预次断希望夹防罩没任何微暂板抬确发生已经以坐标现匹尽清洁且直门信息即实性是否需详细警告骤严格照户册通道超米至指稍重拔剪去变形推荐四에러중단최대온도소센서히터고장안전류스위치걸림노즐보호콘택트사용프린블루투연결성공익피리언카드모델컨티뉴그하나의발생락세요메원또는취디폴초기설정버튼클릭레코멘환경비가열주변잔여재료를화시킵니다운되면작업및교음삽입압출될때지활게올해선후으로체인수평조유자동램을행겠습까준와마땅한거이상적효과달할있절팬속셋추저축측능길태젼완배충종것구쪽제어물감율규격명칭직식된파일없팅라머더막부분복귀커닫아당포즈됨낮춤키돌십오냉각좌표현않국청확회풍간떤쇄퇴계높미픽워닝웨무브먼턴바웃곡징력통꾸뒤품
 */

static const uint8_t lcd_font_chinese[] PROGMEM ={
  
  
  /* 错[0x9519]   12x12 */
  0x94,0xF3,0x92,0x00,0xD2,0x52,0x5F,0x52,0x52,0x5F,0xD2,0x00,0x00,0x07,0x04,0x00,
  0x07,0x05,0x05,0x05,0x05,0x05,0x07,0x00,
  
  /* 误[0x8BEF]   12x12 */
  0x09,0xFA,0x00,0x80,0xAF,0xA9,0xA9,0xE9,0xA9,0xAF,0x80,0x00,0x04,0x07,0x02,0x00,
  0x04,0x04,0x02,0x01,0x02,0x04,0x04,0x00,
  
  /* 停[0x505C]   12x12 */
  0x10,0xFC,0x03,0x00,0x62,0xAE,0xAA,0xAB,0xAA,0xAE,0x62,0x00,0x00,0x07,0x00,0x00,
  0x00,0x04,0x04,0x07,0x00,0x00,0x00,0x00,
  
  /* 止[0x6B62]   12x12 */
  0x00,0xFC,0x00,0x00,0x00,0xFF,0x10,0x10,0x10,0x10,0x00,0x00,0x04,0x07,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 运[0x8FD0]   12x12 */
  0x11,0xF2,0x00,0x08,0x89,0x69,0x19,0x09,0x09,0xC9,0x08,0x00,0x04,0x03,0x04,0x05,
  0x05,0x05,0x05,0x05,0x05,0x04,0x05,0x00,
  
  /* 行[0x884C]   12x12 */
  0x84,0xE3,0x18,0x00,0x10,0x11,0x11,0x11,0xF1,0x11,0x10,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /* 最[0x6700]   12x12 */
  0x10,0xFF,0x55,0x55,0xF5,0x15,0xD5,0x55,0x55,0x5F,0xD0,0x00,0x02,0x03,0x01,0x01,
  0x07,0x00,0x04,0x05,0x02,0x05,0x04,0x00,
  
  /* 大[0x5927]   12x12 */
  0x04,0x04,0x04,0xC4,0x34,0x0F,0x34,0xC4,0x04,0x04,0x04,0x00,0x04,0x02,0x01,0x00,
  0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x00,
  
  /* 温[0x6E29]   12x12 */
  0x09,0x92,0x00,0x9F,0x95,0x95,0x95,0x95,0x95,0x9F,0x00,0x00,0x04,0x03,0x04,0x07,
  0x04,0x07,0x04,0x07,0x04,0x07,0x04,0x00,
  
  /* 度[0x5EA6]   12x12 */
  0x00,0xFE,0x0A,0x8A,0xBE,0xAA,0xAB,0xAA,0xBE,0x8A,0x0A,0x00,0x06,0x01,0x00,0x04,
  0x05,0x02,0x02,0x02,0x02,0x05,0x04,0x00,
  
  /* 小[0x5C0F]   12x12 */
  0xC0,0x38,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x38,0xC0,0x00,0x00,0x00,0x00,0x04,
  0x04,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 热[0x70ED]   12x12 */
  0x92,0xFF,0x0A,0x80,0x6A,0x1E,0x63,0x82,0x7E,0x80,0x70,0x00,0x04,0x02,0x00,0x02,
  0x04,0x00,0x02,0x04,0x00,0x02,0x04,0x00,
  
  /* 床[0x5E8A]   12x12 */
  0x00,0xFE,0x02,0x22,0xE2,0x22,0xFB,0x22,0xE2,0x22,0x02,0x00,0x06,0x01,0x04,0x03,
  0x00,0x00,0x07,0x00,0x00,0x03,0x04,0x00,
  
  /* 传[0x4F20]   12x12 */
  0x10,0xFC,0x03,0x10,0x52,0x72,0x5E,0x53,0x52,0x52,0xD2,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x01,0x02,0x06,0x01,0x00,0x00,
  
  /* 感[0x611F]   12x12 */
  0xFE,0x02,0xEA,0xAA,0xAA,0xEA,0x02,0x9F,0x62,0x9B,0xC2,0x00,0x04,0x02,0x00,0x06,
  0x05,0x04,0x04,0x06,0x00,0x02,0x04,0x00,
  
  /* 器[0x5668]   12x12 */
  0xA0,0xAF,0xE9,0xA9,0xAF,0x30,0xAF,0xA9,0xE9,0xAF,0xA0,0x00,0x00,0x07,0x04,0x04,
  0x07,0x00,0x07,0x04,0x04,0x07,0x00,0x00,
  
  /* 加[0x52A0]   12x12 */
  0x04,0x84,0x7F,0x04,0x04,0xFC,0x00,0xFE,0x02,0x02,0xFE,0x00,0x06,0x01,0x00,0x04,
  0x04,0x07,0x00,0x03,0x02,0x02,0x03,0x00,
  
  /* 故[0x6545]   12x12 */
  0xC4,0x44,0x7F,0x44,0xC4,0x20,0x18,0x67,0x84,0x7C,0x04,0x00,0x07,0x04,0x04,0x04,
  0x07,0x00,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 障[0x969C]   12x12 */
  0xFF,0x01,0x11,0xEF,0x08,0xFA,0xAE,0xAB,0xAE,0xFA,0x08,0x00,0x07,0x00,0x01,0x01,
  0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x00,
  
  /* 安[0x5B89]   12x12 */
  0x16,0x92,0xD2,0xB2,0x9A,0x13,0x12,0x92,0x72,0x12,0x16,0x00,0x04,0x04,0x04,0x02,
  0x02,0x01,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /* 全[0x5168]   12x12 */
  0x08,0x08,0x94,0x94,0x92,0xF1,0x92,0x94,0x94,0x08,0x08,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 电[0x7535]   12x12 */
  0xFE,0x12,0x12,0x12,0xFF,0x12,0x12,0x12,0x12,0xFE,0x00,0x00,0x01,0x01,0x01,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x06,0x00,
  
  /* 流[0x6D41]   12x12 */
  0x09,0x92,0x00,0x12,0xD2,0x1A,0xD7,0x12,0xD2,0x0A,0x12,0x00,0x04,0x03,0x00,0x04,
  0x03,0x00,0x03,0x00,0x07,0x04,0x07,0x00,
  
  /* 柱[0x67F1]   12x12 */
  0x84,0x64,0xFF,0x24,0x44,0x00,0x44,0x45,0xFE,0x44,0x44,0x00,0x00,0x00,0x07,0x00,
  0x00,0x00,0x04,0x04,0x07,0x04,0x04,0x00,
  
  /* 限[0x9650]   12x12 */
  0xFF,0x11,0xEF,0x00,0xFF,0x49,0x49,0xC9,0x49,0x7F,0x00,0x00,0x07,0x01,0x01,0x04,
  0x07,0x04,0x02,0x00,0x01,0x02,0x05,0x00,
  
  /* 位[0x4F4D]   12x12 */
  0x10,0xFC,0x03,0x00,0x02,0x1A,0xE2,0x03,0x02,0xFA,0x02,0x00,0x00,0x07,0x00,0x00,
  0x04,0x04,0x05,0x04,0x07,0x04,0x04,0x00,
  
  /* 开[0x5F00]   12x12 */
  0x00,0x21,0x21,0xFF,0x21,0x21,0x21,0x21,0xFF,0x21,0x21,0x00,0x00,0x04,0x03,0x00,
  0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /* 关[0x5173]   12x12 */
  0x40,0x44,0x45,0x46,0xC4,0x7C,0xC4,0x46,0x45,0x44,0x40,0x00,0x04,0x04,0x02,0x01,
  0x00,0x00,0x00,0x01,0x02,0x04,0x04,0x00,
  
  /* 损[0x635F]   12x12 */
  0x44,0xFF,0x24,0x00,0xF7,0x15,0x15,0xD5,0x15,0x15,0xF7,0x00,0x04,0x07,0x00,0x00,
  0x05,0x04,0x02,0x01,0x02,0x04,0x05,0x00,
  
  /* 坏[0x574F]   12x12 */
  0x08,0x08,0xFF,0x08,0x41,0x21,0x11,0xFD,0x03,0x11,0x61,0x00,0x02,0x02,0x03,0x01,
  0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
  
  /* 卡[0x5361]   12x12 */
  0x10,0x10,0x10,0x10,0x10,0xFF,0x52,0x92,0x92,0x12,0x10,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x00,0x00,0x00,0x01,0x01,0x00,
  
  /* 住[0x4F4F]   12x12 */
  0x10,0xFC,0x03,0x00,0x44,0x44,0x45,0xFE,0x44,0x44,0x44,0x00,0x00,0x07,0x00,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 喷[0x55B7]   12x12 */
  0xFE,0x02,0xFE,0x00,0xEA,0x3E,0x2A,0xAF,0x2A,0x3E,0xEA,0x00,0x01,0x01,0x01,0x00,
  0x05,0x04,0x02,0x01,0x02,0x04,0x05,0x00,
  
  /* 嘴[0x5634]   12x12 */
  0xFE,0x02,0xFE,0x48,0xEE,0x58,0x5F,0xDA,0x50,0x7F,0xCA,0x00,0x01,0x01,0x01,0x04,
  0x03,0x01,0x01,0x01,0x01,0x05,0x07,0x00,
  
  /* 保[0x4FDD]   12x12 */
  0x10,0xFC,0x03,0x00,0x20,0xEF,0x29,0xF9,0x29,0xEF,0x20,0x00,0x00,0x07,0x00,0x00,
  0x02,0x01,0x00,0x07,0x00,0x01,0x02,0x00,
  
  /* 护[0x62A4]   12x12 */
  0x44,0xFF,0x24,0x00,0xFC,0x24,0x25,0x26,0x24,0x24,0x3C,0x00,0x04,0x07,0x00,0x06,
  0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 联[0x8054]   12x12 */
  0x01,0xFF,0x29,0xFF,0x24,0x25,0xA6,0x7C,0xA6,0x25,0x24,0x00,0x02,0x01,0x01,0x07,
  0x04,0x02,0x01,0x00,0x01,0x02,0x04,0x00,
  
  /* 系[0x7CFB]   12x12 */
  0x40,0x42,0x6A,0x6A,0x56,0xD2,0x4A,0x49,0x45,0x31,0xC0,0x00,0x02,0x02,0x01,0x00,
  0x00,0x07,0x00,0x00,0x01,0x02,0x02,0x00,
  
  /* 使[0x4F7F]   12x12 */
  0x10,0xFC,0x03,0x00,0x7A,0x4A,0x4A,0xFF,0x4A,0x4A,0x7A,0x00,0x00,0x07,0x00,0x00,
  0x04,0x05,0x02,0x05,0x04,0x04,0x04,0x00,
  
  /* 用[0x7528]   12x12 */
  0x00,0x00,0xFF,0x49,0x49,0x49,0xFF,0x49,0x49,0x49,0xFF,0x00,0x00,0x06,0x01,0x00,
  0x00,0x00,0x07,0x00,0x00,0x04,0x07,0x00,
  
  /* 串[0x4E32]   12x12 */
  0xDE,0x52,0x52,0x52,0x52,0xFF,0x52,0x52,0x52,0x52,0xDE,0x00,0x03,0x02,0x02,0x02,
  0x02,0x07,0x02,0x02,0x02,0x02,0x03,0x00,
  
  /* 口[0x53E3]   12x12 */
  0x00,0xFE,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0xFE,0x00,0x00,0x03,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x03,0x00,
  
  /* 打[0x6253]   12x12 */
  0x44,0x44,0xFF,0x24,0x04,0x02,0x02,0x02,0xFE,0x02,0x02,0x00,0x00,0x04,0x07,0x00,
  0x00,0x00,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /* 印[0x5370]   12x12 */
  0xFE,0x12,0x12,0x11,0x11,0x00,0xFF,0x01,0x01,0x01,0xFF,0x00,0x01,0x01,0x01,0x01,
  0x01,0x00,0x07,0x00,0x01,0x01,0x01,0x00,
  
  /* 跳[0x8DF3]   12x12 */
  0xEF,0x09,0xF9,0x4F,0x42,0x24,0xFF,0x00,0xFF,0x24,0x42,0x00,0x07,0x04,0x07,0x02,
  0x04,0x02,0x01,0x00,0x07,0x04,0x07,0x00,
  
  /* 过[0x8FC7]   12x12 */
  0x11,0xF2,0x00,0x04,0x14,0x64,0x04,0x04,0xFF,0x04,0x04,0x00,0x04,0x03,0x04,0x04,
  0x04,0x04,0x05,0x05,0x05,0x04,0x04,0x00,
  
  /* 正[0x6B63]   12x12 */
  0x01,0xF1,0x01,0x01,0x01,0xFF,0x21,0x21,0x21,0x21,0x21,0x00,0x04,0x07,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 在[0x5728]   12x12 */
  0x82,0x42,0xE2,0x1A,0x47,0x42,0x42,0xF2,0x42,0x42,0x42,0x00,0x00,0x00,0x07,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 启[0x542F]   12x12 */
  0x00,0xFE,0x12,0xD2,0x52,0x53,0x52,0x52,0x52,0x52,0xDE,0x00,0x06,0x01,0x00,0x07,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 动[0x52A8]   12x12 */
  0x10,0x12,0xF2,0x12,0x92,0x10,0x04,0xFF,0x04,0x04,0xFC,0x00,0x04,0x07,0x04,0x04,
  0x03,0x04,0x06,0x01,0x00,0x04,0x07,0x00,
  
  /* 请[0x8BF7]   12x12 */
  0x09,0xFA,0x00,0x00,0x22,0xEA,0xAA,0xBF,0xAA,0xEA,0x22,0x00,0x04,0x07,0x02,0x00,
  0x00,0x07,0x02,0x02,0x02,0x07,0x00,0x00,
  
  /* 等[0x7B49]   12x12 */
  0xA4,0xAB,0xAA,0xAE,0xAA,0xBC,0xAB,0xAA,0xEE,0xAA,0xA2,0x00,0x00,0x00,0x01,0x02,
  0x00,0x00,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /* 待[0x5F85]   12x12 */
  0x44,0xF3,0x0C,0x50,0xD2,0x52,0x5F,0x52,0x52,0xF2,0x50,0x00,0x00,0x07,0x00,0x00,
  0x00,0x01,0x00,0x04,0x04,0x07,0x00,0x00,
  
  /* 忽[0x5FFD]   12x12 */
  0x08,0x27,0x12,0x0E,0x22,0x92,0x0E,0x42,0x42,0x7E,0x00,0x00,0x04,0x03,0x00,0x07,
  0x04,0x04,0x05,0x04,0x06,0x01,0x06,0x00,
  
  /* 略[0x7565]   12x12 */
  0xFE,0x22,0xFE,0x22,0xFE,0x44,0xAB,0x92,0x92,0xAA,0x46,0x00,0x03,0x02,0x03,0x02,
  0x03,0x00,0x07,0x04,0x04,0x07,0x00,0x00,
  
  /* 蓝[0x84DD]   12x12 */
  0x7A,0x02,0x7A,0x07,0x22,0x12,0x1A,0x37,0x52,0x12,0x12,0x00,0x04,0x07,0x05,0x05,
  0x07,0x05,0x07,0x05,0x05,0x07,0x04,0x00,
  
  /* 牙[0x7259]   12x12 */
  0x10,0x10,0x1F,0x11,0x91,0x51,0x31,0x11,0xFF,0x11,0x11,0x00,0x02,0x02,0x01,0x01,
  0x00,0x00,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /* 连[0x8FDE]   12x12 */
  0x11,0xF2,0x00,0x92,0x9A,0x96,0xFB,0x92,0x92,0x92,0x00,0x00,0x04,0x03,0x04,0x04,
  0x04,0x04,0x05,0x04,0x04,0x04,0x04,0x00,
  
  /* 接[0x63A5]   12x12 */
  0x44,0xFF,0x24,0x00,0x52,0x5E,0xD2,0x73,0x52,0xDE,0x52,0x00,0x04,0x07,0x00,0x00,
  0x04,0x05,0x02,0x02,0x03,0x04,0x04,0x00,
  
  /* 成[0x6210]   12x12 */
  0x00,0xFC,0x44,0x44,0xC4,0x04,0x1F,0xE4,0x05,0xE6,0x04,0x00,0x06,0x01,0x00,0x04,
  0x07,0x00,0x00,0x04,0x03,0x04,0x03,0x00,
  
  /* 功[0x529F]   12x12 */
  0x02,0x02,0xFE,0x02,0x02,0x04,0x04,0xFF,0x04,0x04,0xFC,0x00,0x02,0x02,0x03,0x01,
  0x01,0x04,0x03,0x00,0x00,0x04,0x07,0x00,
  
  /* 欢[0x6B22]   12x12 */
  0x1A,0x62,0x82,0x7E,0x08,0x07,0x82,0x7A,0x82,0x02,0x0E,0x00,0x04,0x02,0x01,0x02,
  0x04,0x02,0x01,0x00,0x01,0x02,0x04,0x00,
  
  /* 迎[0x8FCE]   12x12 */
  0x11,0xF2,0x80,0xFE,0x82,0x41,0x00,0xFF,0x01,0x81,0xFF,0x00,0x04,0x03,0x04,0x04,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 体[0x4F53]   12x12 */
  0x10,0xFC,0x03,0x00,0x84,0x7C,0x04,0xFF,0x04,0x7C,0x84,0x00,0x00,0x07,0x00,0x00,
  0x01,0x00,0x01,0x07,0x01,0x00,0x01,0x00,
  
  /* 验[0x9A8C]   12x12 */
  0x3D,0x21,0xBF,0xE0,0x08,0x54,0x92,0x51,0x92,0x14,0xC8,0x00,0x01,0x05,0x04,0x07,
  0x00,0x04,0x05,0x04,0x05,0x05,0x04,0x00,
  
  /* 中[0x4E2D]   12x12 */
  0xFC,0x84,0x84,0x84,0x84,0xFF,0x84,0x84,0x84,0x84,0xFC,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 模[0x6A21]   12x12 */
  0x64,0xFF,0x24,0x82,0xFA,0xAF,0xAA,0xAA,0xAF,0xFA,0x82,0x00,0x00,0x07,0x00,0x04,
  0x04,0x02,0x01,0x01,0x02,0x04,0x04,0x00,
  
  /* 型[0x578B]   12x12 */
  0x29,0x9F,0x89,0x89,0xBF,0xC9,0x80,0x9E,0x80,0xA0,0x3F,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 维[0x7EF4]   12x12 */
  0xCC,0xAA,0x99,0x44,0x04,0xFF,0x92,0x92,0xFF,0x92,0x92,0x00,0x04,0x04,0x04,0x02,
  0x00,0x07,0x04,0x04,0x07,0x04,0x04,0x00,
  
  /* 修[0x4FEE]   12x12 */
  0x10,0xFC,0x03,0xF8,0x00,0x14,0x57,0x4A,0x2A,0x96,0x10,0x00,0x00,0x07,0x00,0x03,
  0x00,0x00,0x05,0x05,0x05,0x04,0x02,0x00,
  
  /* 继[0x7EE7]   12x12 */
  0xCC,0xBB,0x88,0x00,0xFF,0x00,0xD6,0x10,0xFF,0x10,0xD6,0x00,0x04,0x04,0x02,0x00,
  0x07,0x04,0x04,0x04,0x05,0x04,0x04,0x00,
  
  /* 续[0x7EED]   12x12 */
  0xCC,0xBB,0x88,0x00,0xAA,0xDA,0xAA,0xFF,0x8A,0x8A,0x9A,0x00,0x04,0x04,0x02,0x00,
  0x04,0x02,0x01,0x00,0x01,0x02,0x04,0x00,
  
  /* 有[0x6709]   12x12 */
  0x42,0x22,0xFA,0x57,0x52,0x52,0x52,0x52,0x52,0xF2,0x02,0x00,0x00,0x00,0x07,0x01,
  0x01,0x01,0x01,0x05,0x05,0x07,0x00,0x00,
  
  /* 一[0x4E00]   12x12 */
  0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 个[0x4E2A]   12x12 */
  0x10,0x10,0x08,0x04,0x02,0xE1,0x02,0x04,0x08,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 不[0x4E0D]   12x12 */
  0x41,0x41,0x21,0x11,0x09,0xFD,0x03,0x11,0x11,0x21,0x41,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 常[0x5E38]   12x12 */
  0x0E,0x82,0xBB,0xAA,0xAA,0xEB,0xAA,0xAA,0xBB,0x82,0x0E,0x00,0x00,0x03,0x00,0x00,
  0x00,0x07,0x00,0x00,0x02,0x03,0x00,0x00,
  
  /* 售[0x552E]   12x12 */
  0x08,0x84,0xBE,0x81,0xAA,0xAA,0xAA,0xBF,0xAA,0xAA,0xAA,0x00,0x00,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 后[0x540E]   12x12 */
  0x00,0xFE,0x12,0x92,0x92,0x92,0x92,0x92,0x91,0x91,0x10,0x00,0x06,0x01,0x00,0x07,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 主[0x4E3B]   12x12 */
  0x04,0x44,0x44,0x44,0x45,0xFE,0x44,0x44,0x44,0x44,0x04,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 菜[0x83DC]   12x12 */
  0x92,0xB2,0xD2,0x97,0xB2,0xD2,0x92,0x97,0xCA,0xAA,0x82,0x00,0x04,0x04,0x02,0x01,
  0x00,0x07,0x00,0x01,0x02,0x04,0x04,0x00,
  
  /* 单[0x5355]   12x12 */
  0x00,0x7C,0x55,0x56,0x54,0xFC,0x54,0x56,0x55,0x7C,0x00,0x00,0x01,0x01,0x01,0x01,
  0x01,0x07,0x01,0x01,0x01,0x01,0x01,0x00,
  
  /* 上[0x4E0A]   12x12 */
  0x00,0x00,0x00,0x00,0x00,0xFF,0x10,0x10,0x10,0x10,0x00,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 机[0x673A]   12x12 */
  0x84,0x64,0xFF,0x24,0x00,0xFF,0x01,0x01,0xFF,0x00,0x80,0x00,0x00,0x00,0x07,0x00,
  0x06,0x01,0x00,0x00,0x07,0x04,0x07,0x00,
  
  /* 源[0x6E90]   12x12 */
  0x09,0x92,0x00,0xFF,0x01,0x7D,0x55,0xD7,0x55,0x7D,0x01,0x00,0x04,0x03,0x04,0x03,
  0x04,0x03,0x04,0x07,0x00,0x03,0x04,0x00,
  
  /* 或[0x6216]   12x12 */
  0x02,0x7A,0x4A,0x4A,0x4A,0x7A,0x02,0xFF,0x02,0xC3,0x32,0x00,0x02,0x02,0x02,0x02,
  0x01,0x01,0x04,0x02,0x03,0x04,0x03,0x00,
  
  /* 者[0x8005]   12x12 */
  0x90,0x92,0xD2,0x52,0x72,0x5F,0x52,0x52,0x58,0xD4,0x12,0x00,0x00,0x00,0x07,0x05,
  0x05,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /* 掉[0x6389]   12x12 */
  0x44,0xFF,0x24,0x00,0xF8,0xA8,0xAF,0xAA,0xAA,0xAA,0xFA,0x00,0x04,0x07,0x00,0x02,
  0x02,0x02,0x02,0x07,0x02,0x02,0x02,0x00,
  
  /* 取[0x53D6]   12x12 */
  0x01,0xFF,0x29,0x29,0xFF,0x01,0x1A,0x62,0x82,0x62,0x1E,0x00,0x02,0x03,0x01,0x01,
  0x03,0x00,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 消[0x6D88]   12x12 */
  0x09,0x92,0x00,0xF9,0xAA,0xA8,0xA8,0xAF,0xA8,0xAA,0xF9,0x00,0x04,0x03,0x00,0x07,
  0x00,0x00,0x00,0x00,0x04,0x04,0x07,0x00,
  
  /* 默[0x9ED8]   12x12 */
  0x5F,0x55,0x51,0xFF,0x55,0x51,0x5F,0x08,0xFF,0x08,0x0A,0x00,0x05,0x01,0x05,0x01,
  0x05,0x01,0x05,0x03,0x00,0x03,0x04,0x00,
  
  /* 认[0x8BA4]   12x12 */
  0x09,0xFA,0x00,0x00,0x00,0x00,0xE0,0x1F,0xE0,0x00,0x00,0x00,0x04,0x07,0x02,0x00,
  0x04,0x03,0x00,0x00,0x00,0x03,0x04,0x00,
  
  /* 进[0x8FDB]   12x12 */
  0x11,0xF2,0x00,0x24,0x24,0xFF,0x24,0x24,0xFF,0x24,0x24,0x00,0x04,0x03,0x04,0x04,
  0x05,0x04,0x04,0x04,0x05,0x04,0x04,0x00,
  
  /* 入[0x5165]   12x12 */
  0x00,0x00,0x01,0xC1,0x31,0x0F,0x30,0xC0,0x00,0x00,0x00,0x00,0x04,0x02,0x01,0x00,
  0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x00,
  
  /* 初[0x521D]   12x12 */
  0x82,0x42,0xE3,0x52,0xAE,0x01,0x01,0xFF,0x01,0x01,0xFF,0x00,0x00,0x00,0x07,0x00,
  0x00,0x04,0x03,0x00,0x04,0x04,0x07,0x00,
  
  /* 始[0x59CB]   12x12 */
  0x04,0x7F,0x84,0x7C,0x00,0xD0,0x5C,0x53,0x50,0x4C,0xD0,0x00,0x04,0x02,0x01,0x06,
  0x00,0x07,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 设[0x8BBE]   12x12 */
  0x09,0xFA,0x00,0x00,0x68,0xAF,0x21,0x21,0x21,0xAF,0x68,0x00,0x04,0x07,0x02,0x00,
  0x04,0x04,0x05,0x02,0x05,0x04,0x04,0x00,
  
  /* 置[0x7F6E]   12x12 */
  0xD7,0x15,0xD5,0x57,0x55,0x7D,0x55,0x57,0x55,0xD5,0x17,0x00,0x07,0x04,0x07,0x05,
  0x05,0x05,0x05,0x05,0x05,0x07,0x04,0x00,
  
  /* 按[0x6309]   12x12 */
  0x22,0xFF,0x12,0x00,0x96,0xF2,0x9A,0x13,0x92,0x72,0x16,0x00,0x04,0x07,0x00,0x04,
  0x04,0x02,0x02,0x01,0x02,0x02,0x04,0x00,
  
  /* 下[0x4E0B]   12x12 */
  0x01,0x01,0x01,0x01,0xFF,0x01,0x09,0x11,0x21,0x41,0x01,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 键[0x952E]   12x12 */
  0x94,0xF3,0x92,0x34,0xEC,0x88,0xAA,0xFF,0xAA,0xBE,0x08,0x00,0x00,0x07,0x04,0x05,
  0x03,0x02,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 提[0x63D0]   12x12 */
  0x44,0xFF,0x24,0x00,0x5F,0x55,0x55,0xD5,0x55,0x55,0x5F,0x00,0x04,0x07,0x00,0x00,
  0x04,0x03,0x04,0x07,0x05,0x05,0x05,0x00,
  
  /* 示[0x793A]   12x12 */
  0x10,0x91,0x11,0x11,0x11,0xF1,0x11,0x11,0x11,0x91,0x10,0x00,0x02,0x01,0x00,0x04,
  0x04,0x07,0x00,0x00,0x00,0x01,0x02,0x00,
  
  /* 建[0x5EFA]   12x12 */
  0x41,0x99,0x15,0xF3,0x04,0x55,0x55,0xFF,0x55,0x5F,0x04,0x00,0x04,0x02,0x01,0x02,
  0x05,0x05,0x05,0x07,0x05,0x05,0x05,0x00,
  
  /* 议[0x8BAE]   12x12 */
  0x09,0xFA,0x00,0x00,0x0E,0x30,0x41,0x86,0x60,0x1E,0x00,0x00,0x04,0x07,0x02,0x04,
  0x04,0x02,0x01,0x01,0x02,0x04,0x04,0x00,
  
  /* 环[0x73AF]   12x12 */
  0x11,0x11,0xFF,0x11,0x00,0x21,0x11,0xFD,0x03,0x11,0x61,0x00,0x02,0x02,0x03,0x01,
  0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
  
  /* 境[0x5883]   12x12 */
  0x08,0xFF,0x08,0x0A,0xFA,0xAE,0xAB,0xAA,0xAE,0xFA,0x0A,0x00,0x02,0x03,0x01,0x04,
  0x04,0x03,0x00,0x00,0x07,0x04,0x06,0x00,
  
  /* 备[0x5907]   12x12 */
  0xD4,0x53,0x52,0x56,0x4A,0xCA,0x4A,0x4A,0x56,0x52,0xD2,0x00,0x07,0x05,0x05,0x05,
  0x05,0x07,0x05,0x05,0x05,0x05,0x07,0x00,
  
  /* 头[0x5934]   12x12 */
  0x10,0x12,0x14,0x11,0xD2,0x30,0xDF,0x10,0x10,0x10,0x10,0x00,0x04,0x04,0x02,0x01,
  0x00,0x00,0x00,0x01,0x02,0x04,0x04,0x00,
  
  /* 并[0x5E76]   12x12 */
  0x40,0x44,0x45,0xFE,0x44,0x44,0x44,0xFE,0x45,0x44,0x40,0x00,0x00,0x04,0x02,0x01,
  0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
  
  /* 软[0x8F6F]   12x12 */
  0x3A,0x27,0xFA,0x22,0x04,0x03,0xC2,0x3A,0xC2,0x02,0x0E,0x00,0x01,0x01,0x07,0x01,
  0x04,0x02,0x01,0x00,0x01,0x02,0x04,0x00,
  
  /* 化[0x5316]   12x12 */
  0x20,0x10,0xFC,0x03,0x00,0x00,0xFF,0x10,0x10,0x08,0x84,0x00,0x00,0x00,0x07,0x00,
  0x00,0x00,0x07,0x04,0x04,0x04,0x07,0x00,
  
  /* 周[0x5468]   12x12 */
  0x00,0xFF,0x01,0xA9,0xA9,0xBD,0xA9,0xA9,0xA9,0x01,0xFF,0x00,0x06,0x01,0x00,0x03,
  0x02,0x02,0x02,0x02,0x03,0x04,0x07,0x00,
  
  /* 围[0x56F4]   12x12 */
  0xFF,0x01,0x55,0x55,0x55,0xFF,0x55,0x55,0xD5,0x01,0xFF,0x00,0x07,0x04,0x04,0x04,
  0x04,0x07,0x04,0x05,0x05,0x04,0x07,0x00,
  
  /* 残[0x6B8B]   12x12 */
  0x21,0x5F,0x89,0x79,0x01,0x2A,0x2A,0xFF,0x2A,0xAB,0x2A,0x00,0x04,0x02,0x01,0x00,
  0x00,0x04,0x04,0x02,0x03,0x04,0x06,0x00,
  
  /* 余[0x4F59]   12x12 */
  0x48,0x48,0x44,0x4C,0x4A,0xF9,0x4A,0x4C,0x44,0x48,0x48,0x00,0x02,0x02,0x01,0x04,
  0x04,0x07,0x00,0x00,0x01,0x02,0x02,0x00,
  
  /* 的[0x7684]   12x12 */
  0xFC,0x44,0x46,0x45,0xFC,0x00,0x18,0x27,0xC4,0x04,0xFC,0x00,0x07,0x04,0x04,0x04,
  0x07,0x00,0x00,0x00,0x04,0x04,0x07,0x00,
  
  /* 材[0x6750]   12x12 */
  0x84,0x64,0xFF,0x24,0x44,0x00,0x84,0x64,0x14,0xFF,0x04,0x00,0x00,0x00,0x07,0x00,
  0x02,0x01,0x00,0x04,0x04,0x07,0x00,0x00,
  
  /* 料[0x6599]   12x12 */
  0x16,0xD0,0xFF,0x50,0x96,0x00,0x12,0x24,0x80,0xFF,0x40,0x00,0x01,0x00,0x07,0x00,
  0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,
  
  /* 会[0x4F1A]   12x12 */
  0x48,0x48,0x44,0x4C,0xCA,0x49,0x4A,0x4C,0xC4,0x48,0x48,0x00,0x00,0x04,0x06,0x05,
  0x04,0x04,0x02,0x02,0x02,0x01,0x06,0x00,
  
  /* 降[0x964D]   12x12 */
  0xFF,0x11,0xEF,0x00,0x24,0xA7,0xAA,0xD2,0xAA,0xA6,0x20,0x00,0x07,0x01,0x01,0x00,
  0x02,0x03,0x02,0x07,0x02,0x02,0x02,0x00,
  
  /* 轻[0x8F7B]   12x12 */
  0x32,0x2F,0xF2,0x22,0x22,0x00,0x51,0x51,0xC9,0x55,0x53,0x00,0x01,0x01,0x07,0x01,
  0x01,0x00,0x04,0x04,0x07,0x04,0x04,0x00,
  
  /* 触[0x89E6]   12x12 */
  0xFC,0xAB,0xFA,0xAE,0xF8,0x00,0x7C,0x44,0xFF,0x44,0x7C,0x00,0x07,0x00,0x00,0x04,
  0x07,0x00,0x04,0x04,0x07,0x02,0x07,0x00,
  
  /* 平[0x5E73]   12x12 */
  0x41,0x45,0x59,0x41,0x41,0xFF,0x41,0x41,0x51,0x4D,0x41,0x00,0x00,0x00,0x00,0x00,
  0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 台[0x53F0]   12x12 */
  0x10,0xD0,0x58,0x54,0x53,0x50,0x48,0x48,0x4A,0xC4,0x18,0x00,0x00,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 来[0x6765]   12x12 */
  0x40,0x4A,0x52,0xC2,0x42,0xFF,0x42,0xC2,0x52,0x4A,0x40,0x00,0x02,0x02,0x01,0x00,
  0x00,0x07,0x00,0x00,0x01,0x02,0x02,0x00,
  
  /* 校[0x6821]   12x12 */
  0x64,0xFF,0x24,0x00,0x12,0x6A,0x82,0x03,0x82,0x6A,0x12,0x00,0x00,0x07,0x00,0x00,
  0x04,0x04,0x02,0x01,0x02,0x04,0x04,0x00,
  
  /* 准[0x51C6]   12x12 */
  0x01,0xC6,0x10,0xFC,0xA7,0xA4,0xA4,0xFE,0xA5,0xA4,0xA4,0x00,0x06,0x01,0x00,0x07,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 步[0x6B65]   12x12 */
  0x20,0x20,0xBE,0xA0,0x20,0xFF,0x24,0x24,0x24,0xA4,0x20,0x00,0x01,0x05,0x04,0x04,
  0x04,0x05,0x04,0x02,0x02,0x01,0x00,0x00,
  
  /* 将[0x5C06]   12x12 */
  0x02,0xCC,0xFF,0x00,0x46,0x5A,0x46,0x5A,0x42,0xF1,0x4D,0x00,0x03,0x00,0x07,0x00,
  0x00,0x01,0x02,0x00,0x04,0x07,0x00,0x00,
  
  /* 削[0x524A]   12x12 */
  0x01,0xFA,0xA8,0xAF,0xA8,0xFA,0x01,0x00,0xFE,0x00,0xFF,0x00,0x00,0x07,0x00,0x00,
  0x04,0x07,0x00,0x00,0x05,0x04,0x07,0x00,
  
  /* 尖[0x5C16]   12x12 */
  0x48,0x46,0x40,0x40,0x48,0xEF,0x40,0x40,0x40,0x46,0x48,0x00,0x04,0x04,0x02,0x02,
  0x01,0x00,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /* 耗[0x8017]   12x12 */
  0x2A,0xAA,0xFF,0xAA,0x2A,0x00,0x92,0x92,0xFE,0x49,0x49,0x00,0x02,0x01,0x07,0x01,
  0x02,0x00,0x00,0x00,0x07,0x04,0x07,0x00,
  
  /* 插[0x63D2]   12x12 */
  0x44,0xFF,0x24,0x08,0xCA,0x2A,0x0A,0xFE,0x0A,0x49,0xC9,0x00,0x04,0x07,0x00,0x00,
  0x07,0x05,0x04,0x07,0x04,0x05,0x07,0x00,
  
  /* 导[0x5BFC]   12x12 */
  0x80,0xBF,0xA5,0xA5,0xA5,0xA5,0xA5,0xE5,0xA5,0xA7,0xB0,0x00,0x00,0x00,0x01,0x02,
  0x00,0x00,0x04,0x07,0x00,0x00,0x00,0x00,
  
  /* 管[0x7BA1]   12x12 */
  0x3C,0x0B,0xFE,0xAA,0xAA,0xAC,0xAB,0xAA,0xBE,0x8A,0x3A,0x00,0x00,0x00,0x07,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 觉[0x89C9]   12x12 */
  0x0C,0xF5,0x16,0x14,0x15,0xD6,0x14,0x14,0x16,0xF5,0x0C,0x00,0x04,0x04,0x04,0x02,
  0x01,0x00,0x03,0x04,0x04,0x04,0x06,0x00,
  
  /* 到[0x5230]   12x12 */
  0x49,0x4D,0x4B,0xF9,0x49,0x45,0x49,0x00,0xFE,0x00,0xFF,0x00,0x04,0x04,0x04,0x07,
  0x02,0x02,0x02,0x00,0x05,0x04,0x07,0x00,
  
  /* 挤[0x6324]   12x12 */
  0x84,0xFF,0x44,0x00,0x22,0xE6,0x2A,0x13,0x2A,0xE6,0x22,0x00,0x04,0x07,0x00,0x00,
  0x06,0x01,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /* 出[0x51FA]   12x12 */
  0xDE,0x10,0x10,0x10,0x10,0xFF,0x10,0x10,0x10,0x10,0xDE,0x00,0x07,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 齿[0x9F7F]   12x12 */
  0x10,0xD0,0x1E,0x10,0x90,0x7F,0x92,0x12,0x12,0xD2,0x10,0x00,0x00,0x07,0x05,0x05,
  0x04,0x04,0x04,0x05,0x05,0x07,0x00,0x00,
  
  /* 轮[0x8F6E]   12x12 */
  0x32,0x2E,0xF3,0x22,0x12,0xE8,0x84,0x83,0x44,0x48,0x10,0x00,0x01,0x01,0x07,0x01,
  0x01,0x07,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 咬[0x54AC]   12x12 */
  0xFE,0x02,0x02,0xFE,0x22,0x5A,0x82,0x03,0x82,0x5A,0x22,0x00,0x03,0x02,0x02,0x03,
  0x04,0x04,0x02,0x01,0x02,0x04,0x04,0x00,
  
  /* 合[0x5408]   12x12 */
  0x08,0x88,0x94,0x94,0x92,0x91,0x92,0x94,0x94,0x88,0x08,0x00,0x00,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 当[0x5F53]   12x12 */
  0x90,0x91,0x96,0x90,0x90,0x9F,0x90,0x90,0x94,0x93,0xF0,0x00,0x04,0x04,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 观[0x89C2]   12x12 */
  0x0A,0x92,0x62,0x9E,0x00,0x3F,0x81,0x79,0x01,0x3F,0x00,0x00,0x02,0x01,0x00,0x05,
  0x04,0x02,0x01,0x07,0x04,0x04,0x07,0x00,
  
  /* 察[0x5BDF]   12x12 */
  0x56,0x72,0x5A,0x2A,0x5A,0x43,0x4A,0x12,0x2A,0x3A,0x26,0x00,0x04,0x05,0x03,0x01,
  0x05,0x07,0x01,0x01,0x03,0x05,0x00,0x00,
  
  /* 从[0x4ECE]   12x12 */
  0x00,0x00,0xE0,0x1F,0xE0,0x00,0xE0,0x1F,0xE0,0x00,0x00,0x00,0x04,0x03,0x00,0x00,
  0x04,0x03,0x00,0x00,0x00,0x03,0x04,0x00,
  
  /* 畅[0x7545]   12x12 */
  0xFC,0x24,0xFF,0x24,0xFC,0x91,0x49,0x2D,0x9B,0x49,0xF8,0x00,0x01,0x01,0x07,0x01,
  0x01,0x02,0x02,0x01,0x04,0x04,0x07,0x00,
  
  /* 地[0x5730]   12x12 */
  0x08,0xFF,0x08,0x10,0xFE,0x10,0x08,0xFF,0x08,0x44,0x7C,0x00,0x02,0x03,0x01,0x00,
  0x07,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 吐[0x5410]   12x12 */
  0xFE,0x02,0x02,0xFE,0x00,0x08,0x08,0xFF,0x08,0x08,0x00,0x00,0x03,0x02,0x02,0x03,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 好[0x597D]   12x12 */
  0x04,0xFF,0x04,0xC4,0x3C,0x00,0x21,0x21,0xF9,0x25,0x23,0x00,0x04,0x02,0x01,0x02,
  0x04,0x00,0x00,0x04,0x07,0x00,0x00,0x00,
  
  /* 了[0x4E86]   12x12 */
  0x00,0x01,0x01,0x01,0x01,0x01,0xE1,0x11,0x09,0x05,0x03,0x00,0x00,0x00,0x00,0x00,
  0x04,0x04,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /* 吧[0x5427]   12x12 */
  0xFE,0x02,0xFE,0x00,0xFF,0x21,0x21,0x3F,0x21,0x21,0x3F,0x00,0x01,0x01,0x01,0x00,
  0x07,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 随[0x968F]   12x12 */
  0xFF,0x11,0xEF,0x00,0x13,0xF0,0x0A,0xFE,0xAB,0xAA,0xFA,0x00,0x07,0x01,0x01,0x00,
  0x04,0x03,0x04,0x05,0x04,0x04,0x05,0x00,
  
  /* 配[0x914D]   12x12 */
  0xFD,0x45,0x3F,0x45,0x45,0xFD,0x00,0xF1,0x11,0x11,0x9F,0x00,0x07,0x05,0x05,0x05,
  0x05,0x07,0x00,0x07,0x04,0x04,0x07,0x00,
  
  /* 送[0x9001]   12x12 */
  0x11,0xF2,0x00,0x24,0xA5,0x66,0x3C,0x66,0xA5,0x24,0x00,0x00,0x04,0x03,0x04,0x05,
  0x04,0x04,0x04,0x04,0x04,0x05,0x04,0x00,
  
  /* 读[0x8BFB]   12x12 */
  0x09,0xFA,0x00,0x00,0xDA,0xAA,0x8A,0xEF,0x8A,0x8A,0x9A,0x00,0x04,0x07,0x02,0x00,
  0x04,0x04,0x02,0x01,0x02,0x04,0x04,0x00,
  
  /* 选[0x9009]   12x12 */
  0x11,0xF2,0x00,0x14,0x13,0xF2,0x1F,0x12,0xF2,0x12,0x90,0x00,0x04,0x03,0x04,0x05,
  0x05,0x04,0x04,0x04,0x05,0x05,0x05,0x00,
  
  /* 择[0x62E9]   12x12 */
  0x44,0xFF,0x24,0x00,0x53,0x55,0x49,0xE9,0x49,0x55,0x53,0x00,0x04,0x07,0x00,0x00,
  0x01,0x01,0x01,0x07,0x01,0x01,0x01,0x00,
  
  /* 要[0x8981]   12x12 */
  0x41,0x5D,0x55,0xD5,0x7F,0x55,0x5F,0x55,0xD5,0x5D,0x41,0x00,0x04,0x04,0x05,0x05,
  0x02,0x02,0x02,0x05,0x04,0x04,0x04,0x00,
  
  /* 然[0x7136]   12x12 */
  0x08,0x97,0x6A,0x32,0x0E,0x00,0x44,0x34,0x0F,0x34,0x45,0x00,0x04,0x02,0x00,0x01,
  0x06,0x00,0x01,0x06,0x00,0x01,0x06,0x00,
  
  /* 换[0x6362]   12x12 */
  0x44,0xFF,0x84,0xFC,0x86,0x85,0xFD,0x85,0x87,0xFC,0x80,0x00,0x04,0x07,0x04,0x04,
  0x02,0x02,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /* 更[0x66F4]   12x12 */
  0x01,0xFD,0x55,0x55,0x55,0xFF,0x55,0x55,0x55,0x7D,0x01,0x00,0x04,0x04,0x05,0x02,
  0x02,0x05,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /* 调[0x8C03]   12x12 */
  0x09,0xFA,0x00,0x00,0xFF,0x11,0xD5,0x5F,0xD5,0x11,0xFF,0x00,0x04,0x07,0x02,0x00,
  0x07,0x00,0x03,0x02,0x03,0x04,0x07,0x00,
  
  /* 您[0x60A8]   12x12 */
  0x08,0x04,0x7E,0x41,0x24,0x13,0x42,0x7E,0x02,0x12,0x66,0x00,0x04,0x03,0x00,0x07,
  0x04,0x05,0x06,0x04,0x06,0x01,0x06,0x00,
  
  /* 想[0x60F3]   12x12 */
  0x22,0x1A,0x7F,0x8A,0x32,0x80,0x7F,0x55,0x55,0x55,0x7F,0x00,0x04,0x03,0x00,0x07,
  0x04,0x04,0x05,0x04,0x06,0x01,0x06,0x00,
  
  /* 自[0x81EA]   12x12 */
  0x00,0xFE,0x92,0x92,0x93,0x93,0x92,0x92,0x92,0xFE,0x00,0x00,0x00,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 程[0x7A0B]   12x12 */
  0x0A,0xCA,0xFF,0x49,0xA0,0xAF,0xA9,0xE9,0xA9,0xAF,0xA0,0x00,0x01,0x00,0x07,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 序[0x5E8F]   12x12 */
  0x00,0xFE,0x42,0x4A,0x4A,0x5A,0xEB,0x6A,0x5A,0x4A,0xC2,0x00,0x06,0x01,0x00,0x00,
  0x00,0x04,0x07,0x00,0x00,0x01,0x00,0x00,
  
  /* 吗[0x5417]   12x12 */
  0xFE,0x02,0xFE,0x00,0x21,0x3D,0x21,0x21,0x21,0x3F,0xE0,0x00,0x01,0x01,0x01,0x00,
  0x01,0x01,0x01,0x05,0x05,0x04,0x07,0x00,
  
  /* 手[0x624B]   12x12 */
  0x80,0x92,0x92,0x92,0x92,0xFE,0x92,0x91,0x91,0x90,0x80,0x00,0x00,0x00,0x00,0x04,
  0x04,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 此[0x6B64]   12x12 */
  0x00,0xFE,0x00,0xFF,0x10,0x10,0x00,0xFF,0x10,0x08,0x84,0x00,0x04,0x07,0x04,0x07,
  0x02,0x02,0x00,0x07,0x04,0x04,0x07,0x00,
  
  /* 伴[0x4F34]   12x12 */
  0x10,0xFC,0x03,0x00,0x91,0x96,0x90,0xFF,0x90,0x94,0x93,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
  
  /* 滋[0x6ECB]   12x12 */
  0x09,0x92,0x44,0x74,0x85,0x66,0x04,0x46,0x75,0x84,0x64,0x00,0x04,0x03,0x04,0x06,
  0x05,0x06,0x00,0x04,0x06,0x05,0x06,0x00,
  
  /* 声[0x58F0]   12x12 */
  0x02,0xEA,0xAA,0xAA,0xAA,0xEF,0xAA,0xAA,0xAA,0xEA,0x02,0x00,0x04,0x03,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 向[0x5411]   12x12 */
  0xFE,0x02,0x02,0xF3,0x13,0x12,0x12,0xF2,0x02,0x02,0xFE,0x00,0x07,0x00,0x00,0x01,
  0x01,0x01,0x01,0x01,0x04,0x04,0x07,0x00,
  
  /* 节[0x8282]   12x12 */
  0x02,0x12,0x12,0x17,0xF2,0x12,0x12,0x17,0x12,0xF2,0x02,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
  
  /* 与[0x4E0E]   12x12 */
  0x80,0x98,0x97,0x92,0x92,0x92,0x92,0x92,0xF2,0x82,0x80,0x00,0x00,0x00,0x00,0x00,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /* 距[0x8DDD]   12x12 */
  0xCF,0x09,0xF9,0x49,0x4F,0x00,0xFF,0x89,0x89,0x89,0xF9,0x00,0x07,0x04,0x07,0x02,
  0x02,0x00,0x07,0x04,0x04,0x04,0x04,0x00,
  
  /* 离[0x79BB]   12x12 */
  0x82,0xBA,0xA2,0xB6,0xEA,0xAB,0xAA,0xB6,0xA2,0xBA,0x82,0x00,0x07,0x00,0x02,0x03,
  0x02,0x02,0x02,0x01,0x06,0x04,0x07,0x00,
  
  /* 达[0x8FBE]   12x12 */
  0x11,0xF2,0x00,0x04,0xC4,0x34,0x0F,0x34,0xC4,0x04,0x00,0x00,0x04,0x03,0x04,0x05,
  0x04,0x04,0x04,0x04,0x04,0x05,0x04,0x00,
  
  /* 理[0x7406]   12x12 */
  0x11,0xFF,0x11,0x00,0x7F,0x49,0x49,0xFF,0x49,0x49,0x7F,0x00,0x02,0x03,0x01,0x04,
  0x05,0x05,0x05,0x07,0x05,0x05,0x05,0x00,
  
  /* 效[0x6548]   12x12 */
  0x12,0x4A,0x83,0x6A,0x12,0x00,0x08,0x77,0x84,0x7C,0x04,0x00,0x04,0x02,0x01,0x02,
  0x04,0x00,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 果[0x679C]   12x12 */
  0x40,0x5F,0x55,0xD5,0x55,0xFF,0x55,0xD5,0x55,0x5F,0x40,0x00,0x02,0x02,0x01,0x00,
  0x00,0x07,0x00,0x00,0x01,0x02,0x02,0x00,
  
  /* 操[0x64CD]   12x12 */
  0x44,0xFF,0x24,0x00,0xB8,0xAF,0xBD,0xC5,0xBD,0xAF,0xB8,0x00,0x04,0x07,0x00,0x00,
  0x04,0x02,0x01,0x07,0x01,0x02,0x04,0x00,
  
  /* 作[0x4F5C]   12x12 */
  0x10,0xFC,0x03,0x10,0x0C,0x03,0xFE,0x92,0x92,0x92,0x92,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /* 于[0x4E8E]   12x12 */
  0x20,0x21,0x21,0x21,0x21,0xFF,0x21,0x21,0x21,0x21,0x20,0x00,0x00,0x00,0x00,0x04,
  0x04,0x07,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 本[0x672C]   12x12 */
  0x04,0x04,0xC4,0x3C,0x04,0xFF,0x04,0x3C,0xC4,0x04,0x04,0x00,0x02,0x01,0x00,0x01,
  0x01,0x07,0x01,0x01,0x00,0x01,0x02,0x00,
  
  /* 返[0x8FD4]   12x12 */
  0x11,0xF2,0x00,0x80,0x7F,0x09,0x39,0x49,0x89,0x49,0x39,0x00,0x04,0x03,0x04,0x05,
  0x04,0x04,0x05,0x05,0x04,0x05,0x05,0x00,
  
  /* 回[0x56DE]   12x12 */
  0xFF,0x01,0x01,0xF9,0x89,0x89,0x89,0xF9,0x01,0x01,0xFF,0x00,0x07,0x04,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 级[0x7EA7]   12x12 */
  0xCC,0xBB,0x88,0x01,0xFF,0x81,0x11,0x19,0x97,0x70,0x00,0x00,0x04,0x04,0x02,0x06,
  0x01,0x04,0x05,0x02,0x05,0x04,0x04,0x00,
  
  /* 风[0x98CE]   12x12 */
  0x00,0xFF,0x01,0x09,0x91,0x61,0x9D,0x01,0xFF,0x00,0x80,0x00,0x06,0x01,0x00,0x01,
  0x00,0x00,0x03,0x00,0x03,0x04,0x03,0x00,
  
  /* 扇[0x6247]   12x12 */
  0x01,0xFD,0x55,0xD5,0x55,0xD5,0x15,0x55,0xD5,0x55,0xDD,0x00,0x06,0x01,0x02,0x02,
  0x05,0x07,0x00,0x02,0x02,0x05,0x07,0x00,
  
  /* 转[0x8F6C]   12x12 */
  0x3A,0x27,0xFA,0x22,0x00,0x52,0x72,0x5F,0x52,0xD2,0x50,0x00,0x01,0x01,0x07,0x01,
  0x00,0x00,0x01,0x02,0x05,0x00,0x00,0x00,
  
  /* 速[0x901F]   12x12 */
  0x11,0xF2,0x00,0x3A,0xEA,0x2A,0xFF,0x2A,0xEA,0x3A,0x00,0x00,0x04,0x03,0x04,0x05,
  0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x00,
  
  /* 高[0x9AD8]   12x12 */
  0xE2,0x22,0x2E,0xAA,0xAA,0xAB,0xAA,0xAA,0x2E,0x22,0xE2,0x00,0x07,0x00,0x00,0x03,
  0x02,0x02,0x02,0x03,0x04,0x04,0x07,0x00,
  
  /* 低[0x4F4E]   12x12 */
  0x10,0xFC,0x03,0x00,0xFE,0x12,0x12,0x7E,0x92,0x11,0x91,0x00,0x00,0x07,0x00,0x01,
  0x05,0x05,0x05,0x04,0x05,0x02,0x01,0x00,
  
  /* 未[0x672A]   12x12 */
  0x20,0x24,0x24,0xE4,0x24,0xFF,0x24,0xE4,0x24,0x24,0x20,0x00,0x02,0x02,0x01,0x00,
  0x00,0x07,0x00,0x00,0x01,0x02,0x02,0x00,
  
  /* 知[0x77E5]   12x12 */
  0x2F,0x22,0xFE,0x22,0x22,0x00,0xFE,0x02,0x02,0x02,0xFE,0x00,0x04,0x03,0x00,0x01,
  0x06,0x00,0x03,0x02,0x02,0x02,0x03,0x00,
  
  /* 复[0x590D]   12x12 */
  0x04,0x03,0xBE,0xEA,0xAA,0xAA,0xAA,0xAA,0xAA,0xBE,0x82,0x00,0x02,0x01,0x04,0x05,
  0x02,0x02,0x02,0x02,0x02,0x05,0x04,0x00,
  
  /* 退[0x9000]   12x12 */
  0x11,0xF2,0x00,0x00,0xFF,0x15,0x35,0x55,0x95,0x5F,0x20,0x00,0x04,0x03,0x04,0x05,
  0x05,0x05,0x05,0x04,0x04,0x05,0x05,0x00,
  
  /* 慢[0x6162]   12x12 */
  0x7C,0x00,0xFF,0x04,0x70,0x5F,0x75,0x55,0x75,0xDF,0x70,0x00,0x00,0x00,0x07,0x00,
  0x04,0x04,0x05,0x02,0x05,0x04,0x04,0x00,
  
  /* 缩[0x7F29]   12x12 */
  0xCC,0xBB,0x88,0x26,0xFA,0x02,0xEB,0xAA,0xBA,0xAA,0xEE,0x00,0x04,0x04,0x02,0x00,
  0x07,0x00,0x07,0x04,0x04,0x04,0x07,0x00,
  
  /* 检[0x68C0]   12x12 */
  0xC4,0xFF,0x44,0x04,0xD4,0x12,0xD1,0x11,0x12,0xD4,0x04,0x00,0x00,0x07,0x00,0x04,
  0x04,0x05,0x04,0x05,0x06,0x05,0x04,0x00,
  
  /* 测[0x6D4B]   12x12 */
  0x09,0x92,0x00,0xFF,0x01,0xF9,0xFF,0x00,0xFE,0x00,0xFF,0x00,0x04,0x03,0x00,0x04,
  0x02,0x01,0x06,0x00,0x05,0x04,0x07,0x00,
  
  /* 能[0x80FD]   12x12 */
  0xF4,0x56,0x55,0x54,0x52,0xF4,0x00,0xDF,0x92,0x92,0x59,0x00,0x07,0x01,0x01,0x01,
  0x05,0x07,0x00,0x07,0x04,0x04,0x06,0x00,
  
  /* 闭[0x95ED]   12x12 */
  0xF9,0x02,0x10,0x11,0x91,0x51,0x31,0xFD,0x11,0x01,0xFF,0x00,0x07,0x00,0x01,0x01,
  0x00,0x04,0x04,0x07,0x00,0x04,0x07,0x00,
  
  /* 长[0x957F]   12x12 */
  0x10,0x10,0xFF,0x10,0x54,0x94,0x12,0x12,0x11,0x10,0x10,0x00,0x00,0x00,0x07,0x04,
  0x04,0x00,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /* 恢[0x6062]   12x12 */
  0x38,0x00,0xFF,0x08,0x12,0xFF,0x12,0x22,0xFA,0x22,0x12,0x00,0x00,0x00,0x07,0x00,
  0x06,0x01,0x04,0x03,0x00,0x03,0x04,0x00,
  
  /* 厂[0x5382]   12x12 */
  0x00,0xFF,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x06,0x01,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 状[0x72B6]   12x12 */
  0x02,0xCC,0xFF,0x00,0x08,0x08,0xC8,0x3F,0xC8,0x09,0x0A,0x00,0x03,0x00,0x07,0x00,
  0x04,0x03,0x00,0x00,0x00,0x03,0x04,0x00,
  
  /* 态[0x6001]   12x12 */
  0x22,0xA2,0x12,0x8A,0x16,0xA3,0x06,0x0A,0x12,0xA2,0x22,0x00,0x04,0x03,0x00,0x07,
  0x04,0x04,0x05,0x04,0x07,0x00,0x07,0x00,
  
  /* 固[0x56FA]   12x12 */
  0xFF,0x01,0xC9,0x49,0x49,0x7D,0x49,0x49,0xC9,0x01,0xFF,0x00,0x07,0x04,0x05,0x05,
  0x05,0x05,0x05,0x05,0x05,0x04,0x07,0x00,
  
  /* 件[0x4EF6]   12x12 */
  0x10,0xFC,0x03,0x48,0x47,0x44,0x44,0xFF,0x44,0x44,0x44,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,
  
  /* 版[0x7248]   12x12 */
  0x00,0xFF,0x48,0xCF,0x08,0x00,0xFF,0x19,0x69,0x89,0x79,0x00,0x04,0x03,0x00,0x07,
  0x00,0x06,0x01,0x00,0x06,0x01,0x06,0x00,
  
  /* 编[0x7F16]   12x12 */
  0xCC,0xBB,0x88,0x00,0xFD,0x55,0xD5,0x55,0xD5,0x55,0xDD,0x00,0x04,0x04,0x02,0x00,
  0x07,0x01,0x07,0x01,0x07,0x01,0x07,0x00,
  
  /* 号[0x53F7]   12x12 */
  0x20,0x2F,0xE9,0xA9,0xA9,0xA9,0xA9,0xA9,0xA9,0xAF,0x20,0x00,0x00,0x00,0x00,0x00,
  0x00,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 完[0x5B8C]   12x12 */
  0x4E,0x42,0x4A,0xCA,0x4A,0x4B,0x4A,0xCA,0x4A,0x42,0x4E,0x00,0x04,0x04,0x02,0x01,
  0x00,0x00,0x00,0x07,0x04,0x04,0x07,0x00,
  
  /* 池[0x6C60]   12x12 */
  0x09,0x92,0x00,0x10,0xFE,0x10,0x08,0xFF,0x08,0x44,0x7C,0x00,0x04,0x03,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 充[0x5145]   12x12 */
  0x22,0x22,0x32,0xAE,0x22,0x23,0x22,0xA2,0x16,0x0A,0x12,0x00,0x04,0x04,0x02,0x01,
  0x00,0x00,0x00,0x07,0x04,0x04,0x07,0x00,
  
  /* 满[0x6EE1]   12x12 */
  0x09,0x92,0x00,0xEA,0x2A,0xFF,0x2A,0x2A,0xFF,0x2A,0xEA,0x00,0x04,0x03,0x00,0x07,
  0x01,0x00,0x01,0x01,0x00,0x05,0x07,0x00,
  
  /* 量[0x91CF]   12x12 */
  0x10,0xFF,0x55,0x55,0x55,0xF5,0x55,0x55,0x55,0xFF,0x10,0x00,0x04,0x05,0x05,0x05,
  0x05,0x07,0x05,0x05,0x05,0x05,0x04,0x00,
  
  /* 寿[0x5BFF]   12x12 */
  0xA2,0xAA,0xAA,0xEA,0xBF,0xAA,0xAA,0xAA,0xEA,0xAA,0xA2,0x00,0x02,0x02,0x01,0x00,
  0x02,0x00,0x00,0x04,0x07,0x00,0x00,0x00,
  
  /* 命[0x547D]   12x12 */
  0x08,0xE8,0x24,0x2C,0xEA,0x09,0xEA,0x2C,0x24,0xE8,0x08,0x00,0x00,0x03,0x02,0x02,
  0x03,0x00,0x07,0x00,0x02,0x03,0x00,0x00,
  
  /* 时[0x65F6]   12x12 */
  0xFE,0x22,0x22,0xFE,0x00,0x24,0xC4,0x04,0xFF,0x04,0x04,0x00,0x03,0x02,0x02,0x03,
  0x00,0x00,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /* 间[0x95F4]   12x12 */
  0xF9,0x02,0x00,0xF9,0x49,0x49,0x49,0xF9,0x01,0x01,0xFF,0x00,0x07,0x00,0x00,0x03,
  0x02,0x02,0x02,0x03,0x04,0x04,0x07,0x00,
  
  /* 部[0x90E8]   12x12 */
  0x22,0xAE,0xB2,0xA3,0xB2,0xAE,0x22,0xFF,0x01,0x19,0xE7,0x00,0x00,0x07,0x04,0x04,
  0x04,0x07,0x00,0x07,0x01,0x01,0x00,0x00,
  
  /* 结[0x7ED3]   12x12 */
  0xCC,0xBB,0x88,0x00,0xD2,0x52,0x52,0x5F,0x52,0x52,0xD2,0x00,0x04,0x04,0x02,0x00,
  0x07,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 束[0x675F]   12x12 */
  0x02,0x7A,0x4A,0xCA,0x4A,0xFF,0x4A,0xCA,0x4A,0x7A,0x02,0x00,0x02,0x02,0x01,0x00,
  0x00,0x07,0x00,0x00,0x01,0x02,0x02,0x00,
  
  /* 被[0x88AB]   12x12 */
  0x42,0xF3,0x2E,0x50,0x00,0xFE,0x52,0x92,0x1F,0x92,0x76,0x00,0x00,0x07,0x00,0x00,
  0x06,0x01,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 构[0x6784]   12x12 */
  0x84,0x64,0xFF,0x44,0x90,0x48,0x27,0x84,0xC4,0x04,0xFC,0x00,0x00,0x00,0x07,0x00,
  0x01,0x01,0x01,0x00,0x05,0x04,0x07,0x00,
  
  /* 处[0x5904]   12x12 */
  0x20,0x18,0x67,0x82,0x42,0x32,0x0E,0x00,0xFF,0x10,0x20,0x00,0x04,0x02,0x01,0x00,
  0x01,0x02,0x02,0x04,0x05,0x04,0x04,0x00,
  
  /* 移[0x79FB]   12x12 */
  0x8A,0x6A,0xFF,0x29,0x48,0x24,0xAB,0x52,0x4A,0x46,0xC0,0x00,0x00,0x00,0x07,0x00,
  0x00,0x05,0x04,0x05,0x02,0x01,0x00,0x00,
  
  /* 率[0x7387]   12x12 */
  0x82,0x4A,0x12,0x42,0x6A,0xD7,0x6A,0x42,0x12,0x4A,0x82,0x00,0x01,0x01,0x01,0x01,
  0x01,0x07,0x01,0x01,0x01,0x01,0x01,0x00,
  
  /* 参[0x53C2]   12x12 */
  0x90,0x94,0x56,0x35,0x5C,0x34,0x94,0x34,0x52,0x94,0x90,0x00,0x00,0x00,0x00,0x05,
  0x05,0x05,0x04,0x02,0x01,0x00,0x00,0x00,
  
  /* 数[0x6570]   12x12 */
  0x95,0xCC,0xBF,0x8C,0x95,0x20,0x18,0x67,0x84,0x7C,0x04,0x00,0x04,0x05,0x02,0x05,
  0x04,0x00,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 存[0x5B58]   12x12 */
  0x42,0xE2,0x1A,0x86,0x93,0x92,0x92,0xD2,0xB2,0x92,0x82,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x04,0x07,0x00,0x00,0x00,0x00,
  
  /* 名[0x540D]   12x12 */
  0x00,0x88,0x88,0xD4,0x53,0x62,0x62,0x52,0x4A,0x46,0xC0,0x00,0x00,0x00,0x00,0x07,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 称[0x79F0]   12x12 */
  0x0A,0xCA,0xFE,0x49,0x89,0x10,0xEF,0x02,0xFA,0x02,0xE6,0x00,0x01,0x00,0x07,0x00,
  0x00,0x00,0x01,0x04,0x07,0x00,0x01,0x00,
  
  /* 线[0x7EBF]   12x12 */
  0xCC,0xBB,0x88,0x24,0x24,0x24,0x3F,0xE4,0x25,0xA6,0x24,0x00,0x04,0x04,0x02,0x00,
  0x04,0x04,0x04,0x02,0x03,0x04,0x02,0x00,
  
  /* 径[0x5F84]   12x12 */
  0x44,0xF3,0x0C,0x00,0x21,0xA3,0x95,0xC9,0x95,0xA3,0x20,0x00,0x00,0x07,0x00,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 找[0x627E]   12x12 */
  0x44,0xFF,0x24,0x00,0x08,0x08,0x7F,0x88,0x69,0x0A,0x08,0x00,0x04,0x07,0x00,0x00,
  0x04,0x04,0x02,0x01,0x02,0x04,0x03,0x00,
  
  /* 可[0x53EF]   12x12 */
  0x01,0xF9,0x89,0x89,0x89,0x89,0xF9,0x01,0x01,0xFF,0x01,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 识[0x8BC6]   12x12 */
  0x09,0xFA,0x00,0x00,0x3F,0xA1,0x21,0x21,0x21,0xA1,0x3F,0x00,0x04,0x07,0x02,0x00,
  0x06,0x01,0x00,0x00,0x00,0x01,0x06,0x00,
  
  /* 别[0x522B]   12x12 */
  0x2F,0x29,0xF9,0x29,0x29,0xEF,0x00,0xFE,0x00,0x00,0xFF,0x00,0x04,0x03,0x00,0x04,
  0x04,0x07,0x00,0x01,0x04,0x04,0x07,0x00,
  
  /* 文[0x6587]   12x12 */
  0x04,0x04,0x1C,0x24,0x44,0x87,0x44,0x24,0x1C,0x04,0x04,0x00,0x04,0x04,0x02,0x02,
  0x01,0x00,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /* 定[0x5B9A]   12x12 */
  0x0E,0x12,0xD2,0x12,0x12,0xF3,0x92,0x92,0x92,0x92,0x0E,0x00,0x04,0x02,0x01,0x02,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 义[0x4E49]   12x12 */
  0x00,0x0F,0x30,0x40,0x81,0x06,0x80,0x40,0x30,0x0F,0x00,0x00,0x04,0x04,0x04,0x02,
  0x02,0x01,0x02,0x02,0x04,0x04,0x04,0x00,
  
  /* 改[0x6539]   12x12 */
  0xF2,0x12,0x12,0x1E,0x00,0x08,0x7C,0x87,0x84,0x7C,0x04,0x00,0x03,0x02,0x02,0x03,
  0x04,0x04,0x02,0x01,0x01,0x02,0x04,0x00,
  
  /* 辅[0x8F85]   12x12 */
  0x3A,0x27,0xF2,0xA2,0xF4,0x54,0x54,0xFF,0x54,0x55,0xF4,0x00,0x01,0x01,0x07,0x00,
  0x07,0x01,0x01,0x07,0x01,0x05,0x07,0x00,
  
  /* 助[0x52A9]   12x12 */
  0x00,0xFF,0x49,0x49,0xFF,0x04,0x04,0xFF,0x04,0x04,0xFC,0x00,0x04,0x07,0x04,0x02,
  0x03,0x04,0x03,0x00,0x00,0x04,0x07,0x00,
  
  /* 为[0x4E3A]   12x12 */
  0x04,0x05,0x86,0x7C,0x07,0x04,0x24,0xC4,0x04,0x04,0xFC,0x00,0x00,0x04,0x03,0x00,
  0x00,0x00,0x00,0x00,0x04,0x04,0x07,0x00,
  
  /* 预[0x9884]   12x12 */
  0x11,0x15,0xF9,0x15,0x33,0x00,0xFD,0x05,0xF7,0x05,0xFD,0x00,0x04,0x04,0x07,0x00,
  0x00,0x00,0x05,0x02,0x01,0x02,0x05,0x00,
  
  /* 次[0x6B21]   12x12 */
  0x01,0xC6,0x10,0x0F,0x02,0x82,0x7A,0x82,0x02,0x12,0x0E,0x00,0x06,0x01,0x04,0x04,
  0x02,0x01,0x00,0x01,0x02,0x04,0x04,0x00,
  
  /* 断[0x65AD]   12x12 */
  0xFF,0x24,0xA8,0xFF,0xA8,0x24,0xFE,0x12,0x12,0xF1,0x11,0x00,0x07,0x05,0x04,0x07,
  0x04,0x05,0x03,0x00,0x00,0x07,0x00,0x00,
  
  /* 希[0x5E0C]   12x12 */
  0x14,0x95,0xD5,0x75,0x5A,0xF2,0x52,0x55,0x55,0xD5,0x15,0x00,0x01,0x00,0x03,0x00,
  0x00,0x07,0x00,0x02,0x02,0x03,0x00,0x00,
  
  /* 望[0x671B]   12x12 */
  0x42,0x5E,0x53,0x52,0x52,0xE0,0x5F,0x55,0x55,0x55,0x7F,0x00,0x04,0x05,0x05,0x05,
  0x05,0x07,0x05,0x05,0x05,0x05,0x04,0x00,
  
  /* 夹[0x5939]   12x12 */
  0x40,0x42,0x4A,0x52,0xC2,0x7F,0xC2,0x52,0x4A,0x42,0x40,0x00,0x04,0x04,0x02,0x01,
  0x00,0x00,0x00,0x01,0x02,0x04,0x04,0x00,
  
  /* 防[0x9632]   12x12 */
  0xFF,0x01,0x11,0xEF,0x02,0x02,0xFE,0x23,0x22,0x22,0xE2,0x00,0x07,0x00,0x01,0x01,
  0x00,0x06,0x01,0x00,0x04,0x04,0x07,0x00,
  
  /* 罩[0x7F69]   12x12 */
  0x00,0xC7,0x45,0x45,0x7F,0x55,0x57,0x55,0x55,0xD7,0x10,0x00,0x01,0x01,0x01,0x01,
  0x01,0x07,0x01,0x01,0x01,0x01,0x01,0x00,
  
  /* 没[0x6CA1]   12x12 */
  0x09,0x92,0x00,0x68,0xAF,0x21,0x21,0x21,0x21,0xAF,0x68,0x00,0x04,0x03,0x00,0x04,
  0x04,0x05,0x02,0x02,0x05,0x04,0x04,0x00,
  
  /* 任[0x4EFB]   12x12 */
  0x10,0xFC,0x03,0x20,0x22,0x22,0x22,0xFE,0x21,0x21,0x20,0x00,0x00,0x07,0x00,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 何[0x4F55]   12x12 */
  0x10,0xFC,0x03,0x00,0xF9,0x89,0x89,0xF9,0x01,0xFF,0x01,0x00,0x00,0x07,0x00,0x00,
  0x00,0x00,0x00,0x04,0x04,0x07,0x00,0x00,
  
  /* 微[0x5FAE]   12x12 */
  0xF2,0x0D,0x17,0xF4,0x17,0xF4,0x17,0x20,0x7F,0x84,0x7C,0x00,0x07,0x00,0x04,0x03,
  0x00,0x07,0x02,0x00,0x06,0x01,0x06,0x00,
  
  /* 暂[0x6682]   12x12 */
  0x2A,0xAE,0x7B,0x2A,0x2A,0x40,0x3E,0x0A,0x7A,0x89,0x09,0x00,0x00,0x07,0x05,0x05,
  0x05,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /* 板[0x677F]   12x12 */
  0x84,0x64,0xFF,0x24,0x00,0xFF,0x29,0xC9,0x09,0xC9,0x39,0x00,0x00,0x00,0x07,0x00,
  0x06,0x01,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 抬[0x62AC]   12x12 */
  0x44,0xFF,0x24,0xD0,0x58,0x54,0x53,0x50,0x50,0x4C,0xD0,0x00,0x04,0x07,0x00,0x07,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 确[0x786E]   12x12 */
  0x21,0xFF,0x09,0xF9,0x00,0xFE,0x95,0xFD,0x95,0x97,0xFC,0x00,0x00,0x03,0x02,0x03,
  0x04,0x03,0x00,0x07,0x00,0x04,0x07,0x00,
  
  /* 发[0x53D1]   12x12 */
  0x08,0x0E,0x88,0x78,0xAF,0x28,0x28,0x29,0x2A,0xE8,0x08,0x00,0x04,0x02,0x05,0x04,
  0x04,0x05,0x02,0x02,0x05,0x04,0x04,0x00,
  
  /* 生[0x751F]   12x12 */
  0x18,0x47,0x44,0x44,0x44,0xFF,0x44,0x44,0x44,0x44,0x04,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 已[0x5DF2]   12x12 */
  0xF9,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x21,0x3F,0x00,0x00,0x07,0x04,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x04,0x06,0x00,
  
  /* 经[0x7ECF]   12x12 */
  0xCC,0xBB,0x88,0x00,0xA1,0xA1,0x91,0x89,0x95,0xA3,0xA1,0x00,0x04,0x04,0x02,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 以[0x4EE5]   12x12 */
  0x00,0xFF,0x00,0x00,0x03,0x9C,0x00,0x00,0x80,0x7F,0x00,0x00,0x04,0x03,0x02,0x02,
  0x01,0x04,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 坐[0x5750]   12x12 */
  0x20,0x90,0x8F,0x90,0xA0,0xFF,0xA0,0x90,0x8F,0x90,0x20,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 标[0x6807]   12x12 */
  0x84,0x64,0xFF,0x24,0x89,0x69,0x09,0xF9,0x09,0x69,0x89,0x00,0x00,0x00,0x07,0x00,
  0x01,0x00,0x04,0x07,0x00,0x00,0x01,0x00,
  
  /* 现[0x73B0]   12x12 */
  0x11,0xFF,0x11,0x11,0x00,0xFF,0x01,0xF9,0x01,0xFF,0x00,0x00,0x02,0x03,0x01,0x01,
  0x04,0x02,0x01,0x00,0x07,0x04,0x06,0x00,
  
  /* 匹[0x5339]   12x12 */
  0xFF,0x01,0x81,0x61,0x1F,0x01,0x01,0xFF,0x81,0x81,0xE1,0x00,0x07,0x04,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 尽[0x5C3D]   12x12 */
  0x00,0xFF,0x09,0x29,0x29,0x49,0x49,0x09,0xF9,0x0F,0x00,0x00,0x06,0x01,0x00,0x01,
  0x01,0x02,0x02,0x04,0x00,0x03,0x04,0x00,
  
  /* 清[0x6E05]   12x12 */
  0x09,0x92,0x20,0xEA,0xAA,0xAA,0xBF,0xAA,0xAA,0xEA,0x20,0x00,0x04,0x03,0x00,0x07,
  0x02,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
  
  /* 洁[0x6D01]   12x12 */
  0x00,0x09,0x92,0x00,0xA4,0xA4,0xA4,0xBF,0xA4,0xA4,0xA4,0x00,0x00,0x04,0x03,0x00,
  0x07,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /* 且[0x4E14]   12x12 */
  0x00,0xFF,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0xFF,0x00,0x00,0x04,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x04,0x00,
  
  /* 直[0x76F4]   12x12 */
  0x02,0xFA,0xAA,0xAA,0xAA,0xAF,0xAA,0xAA,0xAA,0xFA,0x02,0x00,0x04,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x04,0x00,
  
  /* 门[0x95E8]   12x12 */
  0xF9,0x02,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0xFF,0x00,0x07,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x04,0x04,0x07,0x00,
  
  /* 信[0x4FE1]   12x12 */
  0x10,0xFC,0x03,0x04,0x55,0x55,0x55,0x55,0x55,0x55,0x04,0x00,0x00,0x07,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /* 息[0x606F]   12x12 */
  0x00,0xFE,0xAA,0xAA,0xAB,0xAA,0xAA,0xAA,0xAA,0xFE,0x00,0x00,0x04,0x02,0x00,0x07,
  0x04,0x05,0x06,0x04,0x06,0x00,0x06,0x00,
  
  /* 即[0x5373]   12x12 */
  0x00,0xFF,0x49,0x49,0x7F,0x00,0x00,0xFF,0x01,0x01,0xFF,0x00,0x04,0x07,0x04,0x04,
  0x03,0x06,0x00,0x07,0x00,0x01,0x01,0x00,
  
  /* 实[0x5B9E]   12x12 */
  0x4E,0x52,0x66,0x4A,0x42,0xFF,0x42,0x42,0x42,0x42,0x4E,0x00,0x04,0x04,0x02,0x02,
  0x01,0x00,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /* 性[0x6027]   12x12 */
  0x7C,0x00,0xFF,0x00,0x4E,0x44,0x44,0xFF,0x44,0x44,0x44,0x00,0x00,0x00,0x07,0x00,
  0x04,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 是[0x662F]   12x12 */
  0x40,0x5F,0x55,0x55,0x55,0xD5,0x55,0x55,0x55,0x5F,0x40,0x00,0x04,0x03,0x02,0x04,
  0x04,0x07,0x05,0x05,0x05,0x05,0x04,0x00,
  
  /* 否[0x5426]   12x12 */
  0x11,0x91,0x89,0x89,0x85,0xBD,0x83,0x89,0x89,0x91,0x11,0x00,0x00,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 需[0x9700]   12x12 */
  0x5D,0x45,0x55,0x55,0x45,0xDF,0x45,0x55,0x55,0x45,0x5D,0x00,0x07,0x01,0x01,0x07,
  0x01,0x01,0x01,0x07,0x01,0x05,0x07,0x00,
  
  /* 详[0x8BE6]   12x12 */
  0x09,0xFA,0x00,0x00,0x04,0x25,0x26,0xFC,0x26,0x25,0x04,0x00,0x04,0x07,0x02,0x00,
  0x01,0x01,0x01,0x07,0x01,0x01,0x01,0x00,
  
  /* 细[0x7EC6]   12x12 */
  0xCC,0xBB,0x88,0x00,0xFF,0x21,0x21,0xFF,0x21,0x21,0xFF,0x00,0x04,0x04,0x02,0x00,
  0x07,0x04,0x04,0x07,0x04,0x04,0x07,0x00,
  
  /* 警[0x8B66]   12x12 */
  0x44,0x4F,0x4A,0x4E,0x53,0x5E,0x54,0x57,0x4A,0x56,0x52,0x00,0x00,0x07,0x05,0x05,
  0x05,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /* 告[0x544A]   12x12 */
  0x14,0xD3,0x52,0x52,0x52,0x5F,0x52,0x52,0x52,0xD2,0x10,0x00,0x00,0x07,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 骤[0x9AA4]   12x12 */
  0x3D,0x21,0xBF,0xE0,0x51,0xDF,0x55,0xFF,0x29,0x91,0xAF,0x00,0x01,0x05,0x04,0x07,
  0x05,0x02,0x05,0x07,0x01,0x02,0x04,0x00,
  
  /* 严[0x4E25]   12x12 */
  0x05,0xE9,0x21,0x3F,0x21,0x21,0x21,0x3F,0x21,0x29,0x25,0x00,0x06,0x01,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 格[0x683C]   12x12 */
  0x84,0x64,0xFF,0x24,0x48,0xC4,0xAB,0x92,0xAA,0xC6,0x40,0x00,0x00,0x00,0x07,0x00,
  0x00,0x07,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /* 照[0x7167]   12x12 */
  0xFF,0x89,0x89,0xFF,0x00,0xE9,0xA9,0xA7,0xA1,0xA9,0xEF,0x00,0x04,0x02,0x00,0x02,
  0x04,0x00,0x02,0x04,0x00,0x02,0x04,0x00,
  
  /* 户[0x6237]   12x12 */
  0x00,0x00,0xFC,0x24,0x24,0x25,0x26,0x24,0x24,0x24,0x3C,0x00,0x00,0x06,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  /* 册[0x518C]   12x12 */
  0x20,0xFF,0x21,0x21,0xFF,0x20,0xFF,0x21,0x21,0xFF,0x20,0x00,0x04,0x03,0x00,0x04,
  0x07,0x00,0x07,0x00,0x04,0x07,0x00,0x00,
  
  /* 通[0x901A]   12x12 */
  0x11,0xF2,0x00,0xF9,0xA9,0xAB,0xFD,0xAD,0xAB,0xF9,0x00,0x00,0x04,0x03,0x04,0x05,
  0x04,0x04,0x05,0x04,0x04,0x05,0x04,0x00,
  
  /* 道[0x9053]   12x12 */
  0x11,0xF2,0x00,0x02,0xFA,0xAB,0xAE,0xAA,0xAB,0xFA,0x02,0x00,0x04,0x03,0x04,0x04,
  0x07,0x04,0x04,0x04,0x04,0x07,0x04,0x00,
  
  /* 超[0x8D85]   12x12 */
  0xD2,0x12,0xFF,0x92,0x92,0x00,0xE9,0x27,0x21,0x29,0xEF,0x00,0x07,0x01,0x03,0x04,
  0x04,0x04,0x05,0x05,0x05,0x05,0x05,0x00,
  
  /* 米[0x7C73]   12x12 */
  0x10,0x11,0x96,0x70,0x10,0xFF,0x10,0x70,0x94,0x13,0x10,0x00,0x02,0x01,0x00,0x00,
  0x00,0x07,0x00,0x00,0x00,0x01,0x02,0x00,
  
  /* 至[0x81F3]   12x12 */
  0x11,0x91,0x99,0x95,0x93,0xF1,0x91,0x91,0x95,0x89,0x11,0x00,0x04,0x04,0x04,0x04,
  0x04,0x07,0x04,0x04,0x04,0x04,0x04,0x00,
  
  /* 指[0x6307]   12x12 */
  0x44,0xFF,0x24,0x00,0xDF,0x52,0x52,0x52,0x52,0x51,0xD9,0x00,0x04,0x07,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x05,0x07,0x00,
  
  /* 稍[0x7A0D]   12x12 */
  0xCA,0xFF,0x49,0x00,0xF9,0xAA,0xA8,0xAF,0xA8,0xAA,0xF9,0x00,0x00,0x07,0x00,0x00,
  0x07,0x00,0x00,0x00,0x04,0x04,0x07,0x00,
  
  /* 重[0x91CD]   12x12 */
  0x04,0x7D,0x55,0x55,0x55,0xFF,0x55,0x55,0x55,0x7D,0x04,0x00,0x04,0x05,0x05,0x05,
  0x05,0x07,0x05,0x05,0x05,0x05,0x04,0x00,
  
  /* 拔[0x62D4]   12x12 */
  0x44,0xFF,0x24,0x00,0x04,0xC4,0x3F,0xD4,0x14,0xD5,0x34,0x00,0x04,0x07,0x00,0x02,
  0x01,0x00,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /* 剪[0x526A]   12x12 */
  0x7A,0x0A,0x1A,0x2B,0x4A,0x7A,0x02,0x3B,0x02,0x42,0x7A,0x00,0x05,0x05,0x05,0x05,
  0x03,0x01,0x01,0x05,0x05,0x05,0x07,0x00,
  
  /* 去[0x53BB]   12x12 */
  0x40,0x44,0x44,0xC4,0x44,0x7F,0x44,0x44,0x44,0x44,0x40,0x00,0x00,0x04,0x06,0x05,
  0x04,0x04,0x04,0x04,0x03,0x04,0x00,0x00,
  
  /* 变[0x53D8]   12x12 */
  0x12,0x4A,0xC2,0x7E,0x42,0x43,0x42,0x7E,0xC2,0x4A,0x12,0x00,0x04,0x04,0x04,0x05,
  0x02,0x02,0x02,0x05,0x04,0x04,0x04,0x00,
  
  /* 形[0x5F62]   12x12 */
  0x21,0xFF,0x21,0x21,0xFF,0x21,0x00,0x44,0x22,0x11,0x88,0x00,0x06,0x01,0x00,0x00,
  0x07,0x00,0x00,0x04,0x02,0x01,0x00,0x00,
  
  /* 推[0x63A8]   12x12 */
  0x44,0xFF,0x24,0x08,0xFC,0xA7,0xA4,0xFC,0xA7,0xA4,0xA4,0x00,0x04,0x07,0x00,0x00,
  0x07,0x04,0x04,0x07,0x04,0x04,0x04,0x00,
  
  /* 荐[0x8350]   12x12 */
  0x8A,0x4A,0xEA,0x1F,0x8A,0xAE,0xAA,0xAF,0xEA,0x8A,0x8A,0x00,0x00,0x00,0x07,0x00,
  0x00,0x00,0x04,0x07,0x00,0x00,0x00,0x00,
  
  /* 四[0x56DB]   12x12 */
  0xFF,0x81,0x41,0x3F,0x01,0x01,0x01,0x7F,0x41,0x41,0xFF,0x00,0x07,0x04,0x04,0x04,
  0x04,0x04,0x04,0x04,0x04,0x04,0x07,0x00,
  
  /*   [0xC5D0]   12x12 */
  0x00,0x78,0x84,0x84,0x78,0x10,0x12,0xFE,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xB7EC]   12x12 */
  0x00,0x12,0xF2,0x12,0x12,0x1E,0x00,0x10,0x11,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x01,0x01,0x00,0x07,0x00,0x00,
  
  /*   [0xC911]   12x12 */
  0x00,0x20,0x28,0x29,0xA9,0xA5,0xE5,0xA7,0x29,0x28,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xB2E8]   12x12 */
  0x00,0x02,0x3E,0x22,0x22,0x22,0x22,0x20,0x11,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xCD5C]   12x12 */
  0x00,0x40,0x48,0x2A,0xAA,0x3A,0x48,0x40,0x01,0xFF,0x00,0x00,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
  
  /*   [0xB300]   12x12 */
  0x00,0x04,0xFC,0x84,0x84,0x80,0x42,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC628]   12x12 */
  0x00,0x40,0x40,0x46,0x49,0x49,0x79,0x49,0x46,0x40,0x40,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xB3C4]   12x12 */
  0x00,0x00,0x02,0x3E,0x22,0x22,0xE2,0x22,0x22,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC18C]   12x12 */
  0x00,0x00,0x20,0x20,0x10,0x0A,0xCE,0x10,0x10,0x20,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC13C]   12x12 */
  0x00,0x20,0x10,0x0A,0x36,0x08,0x09,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC11C]   12x12 */
  0x00,0x80,0x40,0x32,0x2E,0x40,0x90,0x10,0x11,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD788]   12x12 */
  0x00,0x08,0xC8,0x2A,0x2A,0x2A,0xC8,0x08,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x01,0x01,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD130]   12x12 */
  0x00,0x02,0xFE,0x12,0x12,0x12,0x02,0x10,0x11,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x01,0x01,0x00,0x07,0x00,0x00,
  
  /*   [0xACE0]   12x12 */
  0x00,0x00,0x00,0x02,0x02,0xE2,0x02,0x02,0x82,0x7E,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x03,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC7A5]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x96,0xA2,0x80,0x81,0x3F,0x08,0x08,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xC548]   12x12 */
  0x00,0x1C,0x22,0x22,0x22,0x1C,0x00,0x00,0x01,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC804]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x16,0x2A,0x08,0x09,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xB958]   12x12 */
  0x00,0x80,0x8A,0xBA,0xAA,0xAA,0xAA,0xAA,0xAE,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xC2A4]   12x12 */
  0x00,0x00,0x20,0x20,0x10,0x0A,0x0E,0x10,0x10,0x20,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC704]   12x12 */
  0x00,0x40,0x4C,0x52,0xD2,0x52,0x4C,0x40,0x41,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xCE58]   12x12 */
  0x00,0x00,0x84,0x45,0x35,0x2D,0x44,0x80,0x01,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xAC78]   12x12 */
  0x00,0x20,0x22,0x52,0x52,0x4A,0x4E,0x48,0x49,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xB9BC]   12x12 */
  0x00,0x05,0x3D,0xA5,0xA5,0xA7,0xA0,0xA0,0x91,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /*   [0xB178]   12x12 */
  0x00,0x00,0x02,0x3E,0x20,0x20,0xE0,0x20,0x20,0x20,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC990]   12x12 */
  0x00,0x10,0x54,0x55,0x55,0x55,0x53,0x53,0xD5,0x14,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xBCF4]   12x12 */
  0x00,0x00,0x02,0x7E,0x48,0x48,0xC8,0x4A,0x7E,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xD638]   12x12 */
  0x00,0x00,0x04,0x04,0x34,0x4D,0xC5,0x4D,0x34,0x04,0x04,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xCF58]   12x12 */
  0x00,0x20,0x20,0x25,0x25,0x3D,0x25,0x25,0x35,0x2F,0x20,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xD0DD]   12x12 */
  0x00,0x01,0x3F,0xA5,0xA5,0xA0,0x91,0xBF,0x88,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD2B8]   12x12 */
  0x00,0x00,0x02,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC0AC]   12x12 */
  0x00,0x80,0x80,0x40,0x32,0x2E,0x40,0x80,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC6A9]   12x12 */
  0x00,0x20,0x20,0x26,0xB9,0xA9,0xA9,0xB9,0x26,0x20,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xD504]   12x12 */
  0x00,0x00,0x42,0x4A,0x72,0x42,0x42,0x6A,0x5A,0x42,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xB9B0]   12x12 */
  0x00,0x05,0x3D,0x25,0x25,0x27,0x20,0x20,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xBE14]   12x12 */
  0x00,0x10,0x51,0x5F,0x5A,0x5A,0x5A,0x5A,0xDF,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xB8E8]   12x12 */
  0x00,0x80,0x8A,0xBA,0xAA,0xAA,0xAA,0xAA,0xAE,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xD22C]   12x12 */
  0x00,0x80,0x82,0xBE,0xAA,0xAA,0xAA,0xAA,0xAA,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xC5F0]   12x12 */
  0x00,0x1C,0x22,0x22,0x22,0x1C,0x14,0x14,0x15,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xACB0]   12x12 */
  0x00,0x20,0x22,0x52,0x52,0x4A,0x56,0x54,0x55,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xC131]   12x12 */
  0x00,0x20,0x10,0x0D,0x0B,0x90,0xA4,0x84,0x85,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xACF5]   12x12 */
  0x00,0x20,0x20,0x21,0xA1,0xBD,0xA1,0xA1,0x29,0x27,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xC775]   12x12 */
  0x00,0x1C,0x22,0xA2,0xA2,0x9C,0x80,0x80,0x81,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD53C]   12x12 */
  0x00,0x82,0x8A,0xF2,0x82,0xCA,0xBA,0x82,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB9AC]   12x12 */
  0x00,0x12,0xF2,0x12,0x12,0x1E,0x00,0x80,0x81,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x01,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC5B8]   12x12 */
  0x00,0x1C,0x22,0x22,0x22,0x1C,0x08,0x08,0x09,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xCE74]   12x12 */
  0x00,0x00,0x12,0x92,0x52,0x32,0x0E,0x00,0x01,0xFF,0x20,0x20,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB4DC]   12x12 */
  0x00,0x00,0x02,0x3E,0x22,0x22,0x22,0x22,0x22,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xBAA8]   12x12 */
  0x00,0x00,0x02,0x3E,0x22,0x22,0xE2,0x22,0x3E,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xB378]   12x12 */
  0x00,0x01,0x1F,0x51,0x51,0x54,0x45,0x5F,0x40,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xCEE8]   12x12 */
  0x00,0x40,0x4A,0x2A,0x2A,0x1A,0x0E,0x08,0x09,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xD2F0]   12x12 */
  0x00,0x02,0xFE,0x12,0x12,0x12,0x02,0x80,0x81,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x01,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB274]   12x12 */
  0x00,0x80,0x82,0x9E,0x90,0x90,0x90,0x90,0x90,0x90,0x80,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xADF8]   12x12 */
  0x00,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x82,0x7E,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x03,0x02,0x02,0x00,
  
  /*   [0xD558]   12x12 */
  0x00,0x08,0xC8,0x2A,0x2A,0x2A,0xC8,0x08,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x01,
  0x01,0x01,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB098]   12x12 */
  0x00,0x02,0xFE,0x80,0x80,0x80,0x80,0x40,0x41,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC758]   12x12 */
  0x00,0x00,0x1C,0x22,0x22,0x22,0x1C,0x00,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xBC1C]   12x12 */
  0x00,0x01,0x1F,0x54,0x54,0x55,0x5F,0x40,0x41,0xDF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xC0DD]   12x12 */
  0x20,0x20,0x10,0x0D,0x13,0xA0,0x81,0xBF,0x88,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xB77D]   12x12 */
  0x00,0x05,0x3D,0xA5,0xA5,0xA7,0xA0,0x90,0x91,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC138]   12x12 */
  0x00,0x00,0x80,0x64,0x5C,0xA0,0x22,0xFE,0x01,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC694]   12x12 */
  0x00,0x00,0x00,0x1C,0xE2,0x22,0x22,0xE2,0x1C,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x03,0x02,0x02,0x02,0x00,
  
  /*   [0xBA54]   12x12 */
  0x04,0xFC,0x84,0x84,0xFC,0x10,0x12,0xFE,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC6D0]   12x12 */
  0x00,0x20,0x26,0x29,0xE9,0x29,0xA6,0xA0,0x81,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x05,0x00,0x00,
  
  /*   [0xB610]   12x12 */
  0x00,0x00,0x02,0x3E,0x22,0x22,0xFE,0x22,0x22,0x22,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xB294]   12x12 */
  0x00,0x20,0x21,0x27,0x24,0x24,0x24,0x24,0x24,0x20,0x20,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xCDE8]   12x12 */
  0x00,0xA0,0xA4,0x95,0x95,0x9D,0xA4,0xA0,0x81,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB514]   12x12 */
  0x00,0x02,0xFE,0x82,0x82,0x82,0x82,0x40,0x41,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD3F4]   12x12 */
  0x00,0x10,0x55,0x55,0x57,0x5D,0x55,0x57,0xD5,0x15,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xCD08]   12x12 */
  0x00,0x00,0x40,0x48,0x48,0x2A,0x9A,0x2A,0x28,0x48,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xAE30]   12x12 */
  0x00,0x00,0x02,0x82,0x42,0x32,0x0E,0x00,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC124]   12x12 */
  0x00,0x10,0x10,0x48,0x45,0x4B,0x50,0x44,0x45,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xC815]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x96,0xA8,0x88,0x89,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xBC84]   12x12 */
  0x00,0x02,0xFE,0x90,0x90,0x92,0xFE,0x10,0x11,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD2BC]   12x12 */
  0x00,0x40,0x41,0x5F,0x55,0x55,0x55,0x55,0x55,0x40,0x40,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xD074]   12x12 */
  0x00,0x10,0x50,0x55,0x55,0x55,0x55,0x55,0xDD,0x17,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xB9AD]   12x12 */
  0x00,0x05,0x3D,0xA5,0xA5,0xA7,0xA0,0xA0,0x91,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB808]   12x12 */
  0x00,0x24,0xE4,0x24,0x3C,0x00,0x22,0xFE,0x01,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xCF54]   12x12 */
  0x00,0x00,0x12,0x12,0x12,0xF2,0x12,0x12,0x92,0x7E,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x03,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xBA58]   12x12 */
  0x02,0x3E,0x22,0x22,0x3E,0x08,0x09,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xD658]   12x12 */
  0x00,0x42,0x4A,0x56,0x73,0x56,0x4A,0x42,0x41,0xFF,0x10,0x10,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xACBD]   12x12 */
  0x00,0x20,0x22,0x12,0x12,0x8A,0x96,0x94,0x95,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xBE44]   12x12 */
  0x00,0x02,0xFE,0x90,0x90,0x92,0xFE,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xAC00]   12x12 */
  0x00,0x00,0x02,0x82,0x42,0x32,0x0E,0x00,0x01,0xFF,0x20,0x20,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC5F4]   12x12 */
  0x00,0x0C,0x12,0x52,0x52,0x4C,0x4A,0x4A,0x4A,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xC8FC]   12x12 */
  0x00,0x80,0x90,0x92,0x92,0x8A,0x8A,0x8E,0x92,0x90,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xBCC0]   12x12 */
  0x00,0x02,0x3E,0x28,0x28,0x2A,0x3E,0x14,0x15,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC794]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x16,0x22,0x00,0x01,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC5EC]   12x12 */
  0x00,0x7C,0x82,0x82,0x82,0x7C,0x24,0x24,0x25,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC7AC]   12x12 */
  0x80,0x84,0x44,0x34,0x4C,0x80,0x02,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xB8CC]   12x12 */
  0x00,0x00,0x0A,0x7A,0xCA,0x4A,0x4A,0xCA,0x4E,0x40,0x00,0x00,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x03,0x02,0x02,0x02,0x00,
  
  /*   [0xB97C]   12x12 */
  0x00,0x10,0x55,0x5D,0x55,0x55,0x55,0x55,0xD7,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xD654]   12x12 */
  0x00,0x04,0x34,0x4D,0xC5,0x4D,0x34,0x04,0x01,0xFF,0x20,0x20,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
  
  /*   [0xC2DC]   12x12 */
  0x00,0x80,0x80,0x40,0x32,0x2E,0x40,0x80,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD0B5]   12x12 */
  0x00,0x20,0x2A,0xAA,0x9A,0x0A,0x06,0x00,0x01,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /*   [0xB2C8]   12x12 */
  0x00,0x02,0xFE,0x80,0x80,0x80,0x80,0x40,0x41,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB2E4]   12x12 */
  0x00,0x02,0xFE,0x82,0x82,0x82,0x82,0x80,0x41,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC6B4]   12x12 */
  0x00,0x20,0x20,0x26,0x29,0x29,0xE9,0x29,0x26,0x20,0x20,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xB418]   12x12 */
  0x00,0x02,0x3E,0x22,0xE2,0x22,0x22,0x00,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xBA74]   12x12 */
  0x00,0x02,0x3E,0x22,0x22,0x22,0x3E,0x14,0x15,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC791]   12x12 */
  0x00,0x20,0x22,0x92,0x8A,0x96,0xA2,0x80,0x81,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC5C5]   12x12 */
  0x00,0x1C,0x22,0xA2,0xA2,0x1C,0x08,0x08,0x09,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /*   [0xBC0F]   12x12 */
  0x00,0x02,0x1E,0x12,0x12,0x52,0x5E,0x40,0x01,0x3F,0x00,0x00,0x00,0x00,0x00,0x05,
  0x05,0x05,0x03,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xAD50]   12x12 */
  0x00,0x00,0x02,0xE2,0x02,0x02,0xE2,0x02,0x82,0x7E,0x00,0x00,0x00,0x02,0x02,0x03,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC74C]   12x12 */
  0x00,0x20,0xA0,0xA6,0xA9,0xA9,0xA9,0xA9,0xA6,0x20,0x20,0x00,0x00,0x00,0x00,0x07,
  0x04,0x04,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /*   [0xC0BD]   12x12 */
  0x00,0x20,0x20,0x90,0x8D,0x0B,0x10,0x20,0x01,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /*   [0xC785]   12x12 */
  0x00,0x1C,0x22,0xA2,0xA2,0x1C,0x00,0x00,0x01,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /*   [0xC555]   12x12 */
  0x00,0x1C,0x22,0xA2,0xA2,0x1C,0x00,0x00,0x01,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /*   [0xCD9C]   12x12 */
  0x00,0x10,0x5A,0x5A,0x56,0x53,0x76,0x5A,0xDA,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xB420]   12x12 */
  0x00,0x11,0x17,0x55,0x5D,0x55,0x55,0x50,0x51,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xB54C]   12x12 */
  0x00,0x04,0xFC,0x84,0xFC,0x84,0x82,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC9C0]   12x12 */
  0x00,0x80,0x42,0x22,0x12,0x2A,0x46,0x80,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD65C]   12x12 */
  0x00,0x42,0x4A,0x56,0x73,0x56,0x4A,0x42,0x40,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xAC8C]   12x12 */
  0x00,0x00,0x04,0x84,0x64,0x3C,0x22,0xFE,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC62C]   12x12 */
  0x00,0x10,0x50,0x52,0x55,0x55,0x5D,0x55,0xD2,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xD574]   12x12 */
  0x00,0x08,0xC8,0x2A,0x2A,0xC8,0x0A,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x01,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC120]   12x12 */
  0x40,0x40,0x20,0x1A,0x16,0x20,0x48,0x08,0x09,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xD6C4]   12x12 */
  0x00,0x80,0x84,0x94,0xAC,0xA5,0xA5,0xAC,0x94,0x84,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xC73C]   12x12 */
  0x00,0x00,0x00,0x1C,0x22,0x22,0x22,0x22,0x1C,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xB85C]   12x12 */
  0x00,0x00,0x0A,0x7A,0x4A,0x4A,0xCA,0x4A,0x4E,0x40,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xCCB4]   12x12 */
  0x00,0x00,0x88,0x6A,0xDA,0x28,0x22,0xFE,0x01,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,
  0x01,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC778]   12x12 */
  0x00,0x1C,0x22,0x22,0x22,0x1C,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC218]   12x12 */
  0x00,0x80,0xA0,0xA0,0x90,0x8A,0x8E,0x90,0x90,0xA0,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xD3C9]   12x12 */
  0x00,0x22,0x26,0x3A,0x22,0xBE,0xA2,0x94,0x95,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xC870]   12x12 */
  0x00,0x00,0x20,0x22,0x12,0x12,0xCA,0x0E,0x12,0x20,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC720]   12x12 */
  0x00,0x80,0x80,0x8C,0x92,0x92,0x92,0x92,0x8C,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xC790]   12x12 */
  0x00,0x80,0x42,0x22,0x12,0x2A,0x46,0x80,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB3D9]   12x12 */
  0x00,0x20,0x21,0x2F,0xA9,0xA9,0xB9,0xA9,0x29,0x20,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xB7A8]   12x12 */
  0x00,0x05,0x3D,0xA5,0xA7,0xA0,0x91,0xBF,0x88,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /*   [0xC744]   12x12 */
  0x00,0x10,0x50,0x52,0x55,0x55,0x55,0x55,0xD2,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xD589]   12x12 */
  0x00,0x04,0x34,0x4D,0x4D,0x34,0x05,0x7F,0x08,0x7F,0x00,0x00,0x00,0x00,0x00,0x02,
  0x05,0x05,0x05,0x05,0x05,0x02,0x00,0x00,
  
  /*   [0xACA0]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x8E,0x09,0x3F,0x80,0x3F,0x00,0x00,0x00,0x00,0x04,0x04,
  0x02,0x01,0x06,0x02,0x01,0x02,0x04,0x00,
  
  /*   [0xC2B5]   12x12 */
  0x00,0x20,0xA8,0xA8,0x24,0x25,0x23,0x24,0xA4,0x28,0x20,0x00,0x00,0x00,0x00,0x07,
  0x05,0x05,0x05,0x05,0x07,0x00,0x00,0x00,
  
  /*   [0xAE4C]   12x12 */
  0x00,0x82,0x62,0x1E,0x82,0x62,0x1E,0x00,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x01,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC900]   12x12 */
  0x00,0x20,0x28,0x29,0x29,0x25,0xE5,0x27,0x29,0x28,0x20,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xC640]   12x12 */
  0x00,0x00,0x1C,0x22,0xE2,0x22,0x1C,0x00,0x01,0xFF,0x20,0x20,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xB9C8]   12x12 */
  0x00,0x02,0xFE,0x82,0x82,0x82,0xFE,0x00,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB545]   12x12 */
  0x00,0x02,0x3E,0x22,0x22,0xBE,0xA2,0xA2,0x91,0x3F,0x08,0x08,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xD55C]   12x12 */
  0x00,0x04,0x34,0x4D,0x45,0x4D,0x34,0x04,0x01,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xAC70]   12x12 */
  0x00,0x00,0x02,0x82,0x42,0x32,0x1E,0x10,0x11,0xFF,0x00,0x00,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC774]   12x12 */
  0x00,0x7C,0x82,0x82,0x82,0x7C,0x00,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC0C1]   12x12 */
  0x00,0x20,0x20,0x10,0x0D,0x8B,0x90,0xA0,0x81,0x3F,0x08,0x08,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xC801]   12x12 */
  0x00,0x20,0x22,0x92,0x8A,0x96,0xA8,0x88,0x89,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD6A8]   12x12 */
  0x00,0x00,0x04,0x04,0xB4,0x4D,0x45,0x4D,0xB4,0x04,0x04,0x00,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x02,0x03,0x02,0x02,0x00,
  
  /*   [0xACFC]   12x12 */
  0x00,0x00,0x02,0xF2,0x02,0x42,0x3E,0x00,0x01,0xFF,0x20,0x20,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xB2EC]   12x12 */
  0x00,0x02,0x1E,0x52,0x52,0x52,0x52,0x50,0x49,0xDF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xD560]   12x12 */
  0x00,0x02,0x0A,0x56,0x53,0x56,0x4A,0x42,0x41,0xDF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xC788]   12x12 */
  0x00,0x1C,0x22,0x22,0x22,0x9C,0x00,0x00,0x81,0x3F,0x00,0x00,0x00,0x00,0x04,0x04,
  0x02,0x01,0x06,0x02,0x01,0x02,0x04,0x00,
  
  /*   [0xC808]   12x12 */
  0x00,0x10,0x11,0x49,0x45,0x4B,0x50,0x44,0x45,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xD32C]   12x12 */
  0x00,0x22,0x3E,0x22,0x3E,0x22,0x21,0xFF,0x08,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC18D]   12x12 */
  0x00,0x20,0x28,0xA8,0xA4,0xA5,0xB3,0xA4,0xA4,0x28,0x20,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xC14B]   12x12 */
  0x20,0x20,0x10,0x0D,0x13,0xA8,0x89,0x3F,0x00,0x7F,0x00,0x00,0x00,0x00,0x04,0x04,
  0x02,0x02,0x01,0x02,0x02,0x04,0x04,0x00,
  
  /*   [0xCD94]   12x12 */
  0x00,0x80,0xA0,0xA4,0xA4,0x95,0x8D,0x95,0x94,0xA4,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xC800]   12x12 */
  0x00,0x80,0x42,0x22,0x12,0x2A,0x56,0x90,0x11,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xCD95]   12x12 */
  0x00,0x40,0x50,0x54,0x54,0x4D,0xC5,0x4D,0x54,0x50,0x40,0x00,0x00,0x00,0x00,0x01,
  0x01,0x01,0x01,0x01,0x07,0x00,0x00,0x00,
  
  /*   [0xCE21]   12x12 */
  0x00,0x40,0x50,0x54,0x54,0x4D,0x45,0x4D,0x54,0x50,0x40,0x00,0x00,0x00,0x00,0x01,
  0x01,0x01,0x01,0x01,0x07,0x00,0x00,0x00,
  
  /*   [0xB2A5]   12x12 */
  0x00,0x20,0x21,0x27,0xA4,0xA4,0xA4,0xA4,0x24,0x20,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xAE38]   12x12 */
  0x00,0x20,0x22,0x52,0x52,0x4A,0x46,0x40,0x41,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xD0DC]   12x12 */
  0x00,0x04,0xFC,0x24,0x24,0x04,0x82,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC83C]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x16,0x22,0x14,0x15,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC644]   12x12 */
  0x00,0x40,0x46,0x49,0x79,0x49,0x46,0x40,0x41,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xBC30]   12x12 */
  0x04,0xFC,0x90,0x92,0xFE,0x00,0x02,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xCDA9]   12x12 */
  0x00,0x40,0x50,0x54,0x54,0x4D,0xC5,0x4D,0x54,0x50,0x40,0x00,0x00,0x00,0x00,0x02,
  0x05,0x05,0x05,0x05,0x02,0x00,0x00,0x00,
  
  /*   [0xC885]   12x12 */
  0x00,0x20,0x28,0x29,0xA9,0xA5,0xB5,0xA7,0x29,0x28,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xAC83]   12x12 */
  0x00,0x20,0x22,0x12,0x12,0x0A,0x8E,0x88,0x09,0x7F,0x00,0x00,0x00,0x00,0x00,0x04,
  0x04,0x02,0x02,0x01,0x02,0x02,0x04,0x00,
  
  /*   [0xAD6C]   12x12 */
  0x00,0x40,0x42,0x42,0x42,0x42,0xC2,0x62,0x5E,0x40,0x40,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xCABD]   12x12 */
  0x00,0x20,0x28,0xA9,0xA5,0xA7,0xB9,0xA5,0xA7,0x29,0x28,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xC81C]   12x12 */
  0x80,0x84,0x44,0x34,0x4C,0x90,0x12,0xFE,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC5B4]   12x12 */
  0x00,0x7C,0x82,0x82,0x82,0x7C,0x10,0x10,0x11,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xBB3C]   12x12 */
  0x00,0x10,0x51,0x57,0x55,0x55,0x75,0x55,0xD7,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xAC10]   12x12 */
  0x00,0x20,0x22,0x92,0x92,0x8A,0x86,0x80,0x81,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /*   [0xC728]   12x12 */
  0x00,0x10,0x50,0x52,0x75,0x55,0x55,0x75,0xD2,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xADDC]   12x12 */
  0x00,0x40,0x40,0x42,0xC2,0x42,0x42,0x42,0xE2,0x5E,0x40,0x00,0x00,0x00,0x00,0x00,
  0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xACA9]   12x12 */
  0x00,0x20,0x22,0x92,0x92,0x8A,0x96,0x94,0x95,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xBA85]   12x12 */
  0x00,0x02,0x3E,0x22,0x22,0xA2,0xBE,0x94,0x95,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xCE6D]   12x12 */
  0x00,0x20,0x24,0x15,0x15,0x9D,0xA4,0x80,0x81,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xC9C1]   12x12 */
  0x00,0x20,0x22,0x92,0x8A,0x96,0xA2,0x80,0x81,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC2DD]   12x12 */
  0x00,0x20,0x20,0x90,0x8D,0x8B,0x90,0xA0,0x81,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB41C]   12x12 */
  0x00,0x41,0x4F,0x49,0x79,0x49,0x49,0x40,0x41,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xD30C]   12x12 */
  0x00,0x82,0x8A,0xF2,0x82,0xCA,0xBA,0x82,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC77C]   12x12 */
  0x00,0x0C,0x12,0x52,0x52,0x4C,0x40,0x40,0x41,0xDF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xC5C6]   12x12 */
  0x00,0x1C,0xA2,0xA2,0x22,0x9C,0x08,0x88,0x89,0x3F,0x00,0x00,0x00,0x00,0x00,0x07,
  0x05,0x07,0x04,0x02,0x01,0x02,0x04,0x00,
  
  /*   [0xD305]   12x12 */
  0x00,0x01,0x3F,0x25,0x25,0xA5,0xA1,0xA0,0x91,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xB77C]   12x12 */
  0x00,0x12,0xF2,0x12,0x12,0x1E,0x00,0x80,0x81,0xFF,0x20,0x20,0x00,0x00,0x01,0x01,
  0x01,0x01,0x01,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xBA38]   12x12 */
  0x00,0x02,0xFE,0x82,0x82,0x82,0xFE,0x10,0x11,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB354]   12x12 */
  0x00,0x02,0xFE,0x82,0x82,0x82,0x92,0x90,0x11,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB9C9]   12x12 */
  0x00,0x02,0x3E,0xA2,0xA2,0xA2,0xBE,0x80,0x81,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xBD80]   12x12 */
  0x00,0x80,0x82,0xBE,0xA8,0xA8,0xA8,0xAA,0xBE,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xBD84]   12x12 */
  0x00,0x20,0x21,0x2F,0x2A,0x2A,0xEA,0x2A,0x2F,0x20,0x20,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xBCF5]   12x12 */
  0x00,0x20,0x21,0xAF,0xAA,0xAA,0xBA,0xAA,0xAF,0x20,0x20,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xADC0]   12x12 */
  0x00,0x20,0x22,0x22,0xE2,0x32,0x2E,0x20,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xCEE4]   12x12 */
  0x00,0x00,0x12,0x92,0x52,0x32,0x1E,0x10,0x11,0xFF,0x00,0x00,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB2EB]   12x12 */
  0x00,0x02,0x3E,0xA2,0xA2,0xA2,0xA2,0x90,0x91,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC544]   12x12 */
  0x00,0x7C,0x82,0x82,0x82,0x7C,0x00,0x00,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB2F9]   12x12 */
  0x00,0x02,0x3E,0x22,0x22,0xA2,0xA2,0x90,0x91,0x3F,0x08,0x08,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xD3EC]   12x12 */
  0x00,0x00,0x42,0x4A,0x72,0x42,0xC2,0x6A,0x5A,0x42,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xC988]   12x12 */
  0x00,0x00,0x20,0x22,0x12,0x12,0x0A,0x0E,0x12,0x20,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xB428]   12x12 */
  0x00,0x21,0x2F,0xA9,0xB9,0xA9,0xA9,0xA0,0xA1,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /*   [0xB0AE]   12x12 */
  0x00,0x02,0x1E,0x90,0x90,0x90,0x90,0x90,0x89,0xBF,0x08,0x08,0x00,0x00,0x00,0x04,
  0x04,0x02,0x01,0x02,0x02,0x04,0x00,0x00,
  
  /*   [0xCDA4]   12x12 */
  0x00,0x40,0x50,0x54,0x54,0x4D,0xC5,0x4D,0x54,0x50,0x40,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x07,0x00,0x00,0x00,
  
  /*   [0xD0A4]   12x12 */
  0x00,0x00,0x12,0x92,0x52,0x32,0x0E,0x00,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xB3CC]   12x12 */
  0x00,0x10,0x51,0x57,0x55,0x5D,0x55,0x55,0xD5,0x10,0x10,0x00,0x00,0x00,0x01,0x07,
  0x05,0x05,0x05,0x05,0x05,0x00,0x00,0x00,
  
  /*   [0xC2ED]   12x12 */
  0x00,0x20,0x20,0x90,0x8D,0x0B,0x10,0x20,0x01,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x07,0x05,0x05,0x05,0x05,0x07,0x00,0x00,
  
  /*   [0xC624]   12x12 */
  0x00,0x00,0x00,0x1C,0x22,0x22,0xE2,0x22,0x1C,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x03,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xB0C9]   12x12 */
  0x00,0x02,0x1E,0x10,0x10,0x90,0x89,0xBF,0x88,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xAC01]   12x12 */
  0x00,0x20,0x22,0x92,0x92,0x8A,0x86,0x80,0x81,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC88C]   12x12 */
  0x00,0x20,0x22,0x12,0xF2,0x0A,0x16,0x20,0x01,0xFF,0x20,0x20,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xD45C]   12x12 */
  0x00,0x00,0x22,0x26,0xFA,0x22,0x22,0xF2,0x2E,0x22,0x00,0x00,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x03,0x02,0x02,0x02,0x00,
  
  /*   [0xD604]   12x12 */
  0x00,0x04,0x34,0x4D,0x45,0x4D,0x34,0x28,0x29,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC54A]   12x12 */
  0x00,0x1C,0xA2,0xA2,0x22,0x1C,0x00,0x40,0x41,0x3F,0x08,0x08,0x00,0x00,0x00,0x07,
  0x04,0x05,0x03,0x05,0x05,0x03,0x01,0x00,
  
  /*   [0xAD6D]   12x12 */
  0x00,0x10,0x10,0x91,0x91,0x91,0xF1,0x99,0x97,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xCCAD]   12x12 */
  0x00,0x20,0x24,0x15,0x15,0x9D,0xA4,0x88,0x89,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xD655]   12x12 */
  0x00,0x42,0x4A,0x56,0x73,0x56,0x4A,0x42,0x41,0x7F,0x08,0x08,0x00,0x00,0x00,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xD68C]   12x12 */
  0x00,0x04,0x34,0x4D,0xC5,0x4D,0x34,0x04,0x01,0xFF,0x00,0x00,0x00,0x02,0x02,0x02,
  0x03,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
  
  /*   [0xD48D]   12x12 */
  0x00,0x20,0x29,0x2B,0xAD,0xA9,0xE9,0xAD,0x2B,0x29,0x20,0x00,0x00,0x00,0x00,0x03,
  0x04,0x04,0x04,0x04,0x03,0x00,0x00,0x00,
  
  /*   [0xAC04]   12x12 */
  0x00,0x40,0x42,0x22,0x22,0x12,0x0E,0x00,0x01,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xB5A4]   12x12 */
  0x00,0x02,0x3E,0x22,0x3E,0x22,0x22,0x28,0x09,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xC1C4]   12x12 */
  0x00,0x20,0x20,0xF4,0x1C,0x20,0x02,0xFE,0x21,0xFF,0x00,0x00,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xD1F4]   12x12 */
  0x00,0x02,0x3E,0x2A,0xEA,0x2A,0x2A,0x20,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xACC4]   12x12 */
  0x00,0x00,0x04,0x84,0x64,0x5C,0x52,0xFE,0x01,0xFF,0x00,0x00,0x00,0x01,0x01,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xB192]   12x12 */
  0x00,0x20,0x21,0xA7,0xA4,0xA4,0xBC,0xA4,0xA4,0xA0,0x20,0x00,0x00,0x00,0x00,0x04,
  0x05,0x06,0x04,0x04,0x07,0x04,0x00,0x00,
  
  /*   [0xBBF8]   12x12 */
  0x00,0x02,0xFE,0x82,0x82,0x82,0xFE,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD53D]   12x12 */
  0x00,0x22,0x26,0xBA,0xA2,0xB2,0xAE,0xA2,0x81,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC6CC]   12x12 */
  0x00,0x40,0x4C,0x52,0xD2,0x52,0x4C,0x40,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x00,0x00,0x01,0x01,0x07,0x00,0x00,
  
  /*   [0xB2DD]   12x12 */
  0x00,0x02,0x1E,0x10,0x10,0x90,0x90,0x90,0x89,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xC6E8]   12x12 */
  0x00,0x4C,0x52,0xD2,0x4C,0x40,0x02,0xFE,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x03,
  0x00,0x01,0x01,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xBB34]   12x12 */
  0x00,0x80,0x82,0x9E,0x92,0x92,0x92,0x92,0x9E,0x80,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xBE0C]   12x12 */
  0x00,0x00,0x02,0x7E,0x48,0x48,0x48,0x4A,0x7E,0x00,0x00,0x00,0x00,0x02,0x02,0x02,
  0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x00,
  
  /*   [0xBA3C]   12x12 */
  0x00,0x02,0x3E,0x22,0x22,0x22,0x3E,0x08,0x09,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xD134]   12x12 */
  0x00,0x01,0x3F,0x25,0x25,0x25,0x20,0x24,0x05,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xBC14]   12x12 */
  0x00,0x02,0xFE,0x90,0x90,0x92,0xFE,0x00,0x01,0xFF,0x20,0x20,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xC6C3]   12x12 */
  0x00,0x20,0x20,0x26,0x29,0xA9,0xE9,0x29,0x26,0x20,0x20,0x00,0x00,0x00,0x04,0x04,
  0x02,0x02,0x01,0x02,0x02,0x04,0x00,0x00,
  
  /*   [0xACE1]   12x12 */
  0x00,0x20,0x20,0xA1,0xA1,0xBD,0xA1,0xA1,0xA9,0x27,0x20,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,
  
  /*   [0xC9D5]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x96,0xA2,0x80,0x81,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x04,0x04,0x04,0x04,0x03,0x00,0x00,
  
  /*   [0xB825]   12x12 */
  0x00,0x05,0x3D,0xA5,0xA5,0xA7,0xA0,0x8A,0x8A,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD1B5]   12x12 */
  0x00,0x40,0x41,0x5F,0x55,0x55,0x75,0x55,0x55,0x40,0x40,0x00,0x00,0x00,0x00,0x02,
  0x05,0x05,0x05,0x05,0x02,0x00,0x00,0x00,
  
  /*   [0xAFB8]   12x12 */
  0x00,0x40,0x42,0x62,0x5E,0x40,0xC2,0x42,0x62,0x5E,0x40,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,
  
  /*   [0xB4A4]   12x12 */
  0x00,0x42,0x5E,0x52,0xD2,0x52,0x52,0x40,0x41,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x03,0x00,0x00,0x00,0x00,0x07,0x00,0x00,
  
  /*   [0xD488]   12x12 */
  0x00,0x20,0xA9,0xAB,0xAD,0xA9,0xE9,0xAD,0xAB,0x29,0x20,0x00,0x00,0x00,0x00,0x07,
  0x04,0x04,0x04,0x04,0x07,0x00,0x00,0x00,
  
  /*   [0xD14C]   12x12 */
  0x00,0x04,0xFC,0x24,0x24,0x00,0x22,0xFE,0x01,0xFF,0x00,0x00,0x00,0x00,0x01,0x01,
  0x01,0x01,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xB78C]   12x12 */
  0x00,0x05,0x3D,0xA5,0xA5,0xA7,0xA0,0xA0,0x91,0xBF,0x08,0x08,0x00,0x00,0x00,0x00,
  0x07,0x04,0x04,0x04,0x04,0x07,0x00,0x00,
  
  /*   [0xBC18]   12x12 */
  0x00,0x02,0x3E,0x28,0x28,0x2A,0x3E,0x00,0x01,0xFF,0x08,0x08,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xB0B4]   12x12 */
  0x00,0x04,0xFC,0x80,0x80,0x80,0x42,0xFE,0x21,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x03,0x00,0x07,0x00,0x00,
  
  /*   [0xC9C4]   12x12 */
  0x00,0x20,0x22,0x12,0x0A,0x16,0x22,0x00,0x01,0xFF,0x00,0x00,0x00,0x00,0x00,0x01,
  0x07,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  /*   [0xB05D]   12x12 */
  0x00,0x10,0x51,0xD9,0x57,0x50,0x51,0x51,0x59,0x57,0x10,0x00,0x00,0x00,0x00,0x07,
  0x05,0x05,0x05,0x05,0x05,0x05,0x00,0x00,
  
  /*   [0xB85D]   12x12 */
  0x00,0x40,0x45,0x5D,0x55,0x55,0x75,0x55,0x57,0x40,0x40,0x00,0x00,0x00,0x00,0x01,
  0x01,0x01,0x01,0x01,0x07,0x00,0x00,0x00,
  
  /*   [0xCD98]   12x12 */
  0x00,0x40,0x50,0x54,0x54,0x4D,0xC5,0x4D,0x54,0x50,0x40,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x05,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xC190]   12x12 */
  0x00,0x40,0x48,0x48,0x44,0x45,0x73,0x44,0x44,0x48,0x40,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,
  
  /*   [0xBCF8]   12x12 */
  0x00,0x40,0x41,0x5F,0x54,0x54,0x74,0x55,0x5F,0x40,0x40,0x00,0x00,0x00,0x01,0x07,
  0x04,0x04,0x04,0x04,0x04,0x04,0x00,0x00,
  
  0x00,0x00,0x60,0xF0,0xF8,0xFC,0xFC,0xF8,0xF0,0x60,0x00,0x00,
  0x00,0x00,0x00,0x00,0x01,0x03,0x03,0x01,0x00,0x00,0x00,0x00,/*"*",507 CHINESE_POINT  */
  
  0x00,0x00,0x30,0x70,0xF0,0xF0,0xF0,0xF0,0x70,0x30,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,/*"DOWN, 508 CHINESE_DOWN*/
  
  0x00,0x00,0xC0,0xE0,0xF0,0xF8,0xF8,0xF0,0xE0,0xC0,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"UP, 509 CHINESE_UP*/
  
};



static const uint8_t lcd_font_7x5[] PROGMEM = {
	0x08, 0x1C, 0x3E, 0x1C, 0x08,// menu select \x1C
	0x00, 0x06, 0x09, 0x09, 0x06,// temperature \x1D
	0x10, 0x18, 0x1C, 0x18, 0x10,//  up arrow \x1E
	0x08, 0x18, 0x38, 0x18, 0x08,// down arrow \x1F
	0x00, 0x00, 0x00, 0x00, 0x00,// (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,// !
	0x00, 0x07, 0x00, 0x07, 0x00,// "
	0x14, 0x7F, 0x14, 0x7F, 0x14,// #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
	0x23, 0x13, 0x08, 0x64, 0x62,// %
	0x36, 0x49, 0x55, 0x22, 0x50,// &
	0x00, 0x05, 0x03, 0x00, 0x00,// '
	0x00, 0x1C, 0x22, 0x41, 0x00,// (
	0x00, 0x41, 0x22, 0x1C, 0x00,// )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
	0x08, 0x08, 0x3E, 0x08, 0x08,// +
	0x00, 0x50, 0x30, 0x00, 0x00,// ,
	0x08, 0x08, 0x08, 0x08, 0x08,// -
	0x00, 0x60, 0x60, 0x00, 0x00,// .
	0x20, 0x10, 0x08, 0x04, 0x02,// /
	0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
	0x00, 0x42, 0x7F, 0x40, 0x00,// 1
	0x42, 0x61, 0x51, 0x49, 0x46,// 2
	0x21, 0x41, 0x45, 0x4B, 0x31,// 3
	0x18, 0x14, 0x12, 0x7F, 0x10,// 4
	0x27, 0x45, 0x45, 0x45, 0x39,// 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
	0x01, 0x71, 0x09, 0x05, 0x03,// 7
	0x36, 0x49, 0x49, 0x49, 0x36,// 8
	0x06, 0x49, 0x49, 0x29, 0x1E,// 9
	0x00, 0x36, 0x36, 0x00, 0x00,// :
	0x00, 0x56, 0x36, 0x00, 0x00,// ;
	0x00, 0x08, 0x14, 0x22, 0x41,// <
	0x14, 0x14, 0x14, 0x14, 0x14,// =
	0x41, 0x22, 0x14, 0x08, 0x00,// >
	0x02, 0x01, 0x51, 0x09, 0x06,// ?
	0x32, 0x49, 0x79, 0x41, 0x3E,// @
	0x7E, 0x11, 0x11, 0x11, 0x7E,// A
	0x7F, 0x49, 0x49, 0x49, 0x36,// B
	0x3E, 0x41, 0x41, 0x41, 0x22,// C
	0x7F, 0x41, 0x41, 0x22, 0x1C,// D
	0x7F, 0x49, 0x49, 0x49, 0x41,// E
	0x7F, 0x09, 0x09, 0x01, 0x01,// F
	0x3E, 0x41, 0x41, 0x51, 0x32,// G
	0x7F, 0x08, 0x08, 0x08, 0x7F,// H
	0x00, 0x41, 0x7F, 0x41, 0x00,// I
	0x20, 0x40, 0x41, 0x3F, 0x01,// J
	0x7F, 0x08, 0x14, 0x22, 0x41,// K
	0x7F, 0x40, 0x40, 0x40, 0x40,// L
	0x7F, 0x02, 0x04, 0x02, 0x7F,// M
	0x7F, 0x04, 0x08, 0x10, 0x7F,// N
	0x3E, 0x41, 0x41, 0x41, 0x3E,// O
	0x7F, 0x09, 0x09, 0x09, 0x06,// P
	0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
	0x7F, 0x09, 0x19, 0x29, 0x46,// R
	0x46, 0x49, 0x49, 0x49, 0x31,// S
	0x01, 0x01, 0x7F, 0x01, 0x01,// T
	0x3F, 0x40, 0x40, 0x40, 0x3F,// U
	0x1F, 0x20, 0x40, 0x20, 0x1F,// V
	0x7F, 0x20, 0x18, 0x20, 0x7F,// W
	0x63, 0x14, 0x08, 0x14, 0x63,// X
	0x03, 0x04, 0x78, 0x04, 0x03,// Y
	0x61, 0x51, 0x49, 0x45, 0x43,// Z
	0x00, 0x00, 0x7F, 0x41, 0x41,// [
	0x02, 0x04, 0x08, 0x10, 0x20,// "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,// ]
	0x04, 0x02, 0x01, 0x02, 0x04,// ^
	0x40, 0x40, 0x40, 0x40, 0x40,// _
	0x00, 0x06, 0x09, 0x09, 0x06,// *`
	//0x00, 0x01, 0x02, 0x04, 0x00,// `
	0x20, 0x54, 0x54, 0x54, 0x78,// a
	0x7F, 0x48, 0x44, 0x44, 0x38,// b
	0x38, 0x44, 0x44, 0x44, 0x20,// c
	0x38, 0x44, 0x44, 0x48, 0x7F,// d
	0x38, 0x54, 0x54, 0x54, 0x18,// e
	0x08, 0x7E, 0x09, 0x01, 0x02,// f
	0x08, 0x14, 0x54, 0x54, 0x3C,// g
	0x7F, 0x08, 0x04, 0x04, 0x78,// h
	0x00, 0x44, 0x7D, 0x40, 0x00,// i
	0x20, 0x40, 0x44, 0x3D, 0x00,// j
	0x00, 0x7F, 0x10, 0x28, 0x44,// k
	0x00, 0x41, 0x7F, 0x40, 0x00,// l
	0x7C, 0x04, 0x18, 0x04, 0x78,// m
	0x7C, 0x08, 0x04, 0x04, 0x78,// n
	0x38, 0x44, 0x44, 0x44, 0x38,// o
	0x7C, 0x14, 0x14, 0x14, 0x08,// p
	0x08, 0x14, 0x14, 0x18, 0x7C,// q
	0x7C, 0x08, 0x04, 0x04, 0x08,// r
	0x48, 0x54, 0x54, 0x54, 0x20,// s
	0x04, 0x3F, 0x44, 0x40, 0x20,// t
	0x3C, 0x40, 0x40, 0x20, 0x7C,// u
	0x1C, 0x20, 0x40, 0x20, 0x1C,// v
	0x3C, 0x40, 0x30, 0x40, 0x3C,// w
	0x44, 0x28, 0x10, 0x28, 0x44,// x
	0x0C, 0x50, 0x50, 0x50, 0x3C,// y
	0x44, 0x64, 0x54, 0x4C, 0x44,// z
	0x00, 0x08, 0x36, 0x41, 0x00,// {
	0x00, 0x00, 0x7F, 0x00, 0x00,// |
	0x00, 0x41, 0x36, 0x08, 0x00,// }
	0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
	0x08, 0x1C, 0x2A, 0x08, 0x08, // <-


};

void lcd_lib_draw_string_routine(int16_t x, int16_t y, const char* str, uint8_t fontWidth, uint8_t allWidth,const uint8_t* (*getFontIndex)(uint16_t), bool isProgram, bool isClear){
    uint8_t* dst;
    uint8_t* dst2;
    uint8_t yshift;
    uint8_t yshift2;
    const uint8_t* src;
    bool isChinese;
    uint16_t index;
    uint8_t realFontWidth;
    
    while (index = (uint8_t)(isProgram ? pgm_read_byte(str) : *(str))) {

    isChinese = index & 0x80;
    if (isChinese) {
      index = ((index & (~0x0080U)) + ((uint8_t)(isProgram ? pgm_read_byte(str+1) : *(str+1)) & (~0x0080U))*128U) | 0x8000U;
      realFontWidth = fontWidth*2;
    }
    else{
      realFontWidth = fontWidth;
    }
            if (x>=LCD_GFX_WIDTH) {
                return;
            }
            if (y>=LCD_GFX_HEIGHT) {
                return;
            }
            if (y<-7) {
                return;
            }
            if (x<-realFontWidth) {
      x+=realFontWidth;
      str+=isChinese;
                str++;
                continue;
            }
            if (y<0) {
                dst2 = lcd_buffer + x;
                yshift = 8;
                yshift2 = -y;
            }
            else if((y+7)>LCD_GFX_HEIGHT) {
                dst = lcd_buffer + x + 7 * LCD_GFX_WIDTH;
                yshift = y % 8;
                yshift2 = 8;
            }
            else{
                dst = lcd_buffer + x + (y / 8) * LCD_GFX_WIDTH;
                dst2 = lcd_buffer + x + (y / 8) * LCD_GFX_WIDTH + LCD_GFX_WIDTH;
                yshift = y % 8;
                yshift2 = 8 - yshift;
            }
            
            if (yshift != 8) {
                src = getFontIndex(index);
      for (int i=0; i<realFontWidth; i++) {
        if (x>=0 && x<LCD_GFX_WIDTH) {
          if (isClear) {
            *dst = (*dst) & ~(pgm_read_byte(src++) << yshift);
          }
          else{
            *dst = (*dst) | (pgm_read_byte(src++) << yshift);
          }
                    }
                    else{
                        src++;
                    }
                    dst++;
                    x++;
                }
                dst++;
                x-=realFontWidth;
            }
            
            if (yshift2 != 8){
                src = getFontIndex(index);
                for (int j=0; j<realFontWidth; j++) {
                    if (x>=0 && x<LCD_GFX_WIDTH) {
          if (isClear) {
            *dst2 = (*dst2) & ~(pgm_read_byte(src++) >> yshift2);
          }
          else{
            *dst2 = (*dst2) | (pgm_read_byte(src++) >> yshift2);
          }
                    }
                    else{
                        src++;
                    }
                    dst2++;
                    x++;
                }
                dst2++;
                x-=realFontWidth;
            }
    str+=isChinese;
            str++;
    x+=allWidth<<isChinese;
    }
}

const uint8_t* lcd_lib_draw_string_chinese_get_font_index_up(uint16_t index)
{
  if (index & 0x8000U) {
    index = index & (~0x8000U);
    return lcd_font_chinese + index * 24;
  }
  else{
    return lcd_font_chinese_alphabet + (index-' ') * 12;
  }
}

const uint8_t* lcd_lib_draw_string_chinese_get_font_index_down(uint16_t index)
{
  if (index & 0x8000U) {
    index = index & (~0x8000U);
    return lcd_font_chinese + index * 24 + 12;
  }
  else{
    return lcd_font_chinese_alphabet + (index-' ') * 12 + 6;
  }
}

const uint8_t* lcd_lib_draw_string_get_font_index(uint16_t index)
{
  return lcd_font_7x5 + (index - ' ' + 4) * 5;
}

void lcd_lib_draw_string(int16_t x, int16_t y, const char* str)
{
  switch (languageType) {
  case LANGUAGE_CHINESE:
  case LANGUAGE_KOREAN:
    lcd_lib_draw_string_routine(x, y, str, 6, 6, lcd_lib_draw_string_chinese_get_font_index_up, false, false);
    lcd_lib_draw_string_routine(x, y+8, str, 6, 6, lcd_lib_draw_string_chinese_get_font_index_down, false, false);
    break;
  case LANGUAGE_ENGLISH:
    lcd_lib_draw_string_routine(x, y, str, 5, 6, lcd_lib_draw_string_get_font_index, false,false);
    break;
  default:
    break;
  }
}

void lcd_lib_clear_string(int16_t x, int16_t y, const char* str)
{
  switch (languageType) {
  case LANGUAGE_CHINESE:
  case LANGUAGE_KOREAN:
    lcd_lib_draw_string_routine(x, y, str, 6, 6, lcd_lib_draw_string_chinese_get_font_index_up, false, true);
    lcd_lib_draw_string_routine(x, y+8, str, 6, 6, lcd_lib_draw_string_chinese_get_font_index_down, false, true);
    break;
  case LANGUAGE_ENGLISH:
    lcd_lib_draw_string_routine(x, y, str, 5, 6, lcd_lib_draw_string_get_font_index, false,true);
    break;
  default:
    break;
  }
}

void lcd_lib_draw_string_center(int16_t y, const char* str)
{
    lcd_lib_draw_string(64 - strlen(str) * 3, y, str);
}

void lcd_lib_clear_string_center(int16_t y, const char* str)
{
    lcd_lib_clear_string(64 - strlen(str) * 3, y, str);
}

void lcd_lib_draw_stringP(int16_t x, int16_t y, const char* pstr)
{
  switch (languageType) {
  case LANGUAGE_CHINESE:
  case LANGUAGE_KOREAN:
    lcd_lib_draw_string_routine(x, y, pstr, 6, 6, lcd_lib_draw_string_chinese_get_font_index_up, true, false);
    lcd_lib_draw_string_routine(x, y+8, pstr, 6, 6, lcd_lib_draw_string_chinese_get_font_index_down, true, false);
    break;
  case LANGUAGE_ENGLISH:
    lcd_lib_draw_string_routine(x, y, pstr, 5, 6, lcd_lib_draw_string_get_font_index, true,false);
    break;
  default:
    break;
  }
}

void lcd_lib_clear_stringP(int16_t x, int16_t y, const char* pstr)
{
  switch (languageType) {
  case LANGUAGE_CHINESE:
  case LANGUAGE_KOREAN:
    lcd_lib_draw_string_routine(x, y, pstr, 6, 6, lcd_lib_draw_string_chinese_get_font_index_up, true, true);
    lcd_lib_draw_string_routine(x, y+8, pstr, 6, 6, lcd_lib_draw_string_chinese_get_font_index_down, true, true);
    break;
  case LANGUAGE_ENGLISH:
    lcd_lib_draw_string_routine(x, y, pstr, 5, 6, lcd_lib_draw_string_get_font_index, true,true);
    break;
  default:
    break;
  }
}

void lcd_lib_draw_string_centerP(int16_t y, const char* pstr)
{
    lcd_lib_draw_stringP(64 - strlen_P(pstr) * 3, y, pstr);
}

void lcd_lib_clear_string_centerP(int16_t y, const char* pstr)
{
    lcd_lib_clear_stringP(64 - strlen_P(pstr) * 3, y, pstr);
}

void lcd_lib_draw_string_center_atP(int16_t x, int16_t y, const char* pstr)
{
  lcd_lib_draw_stringP(x - strlen_P(pstr) * 3, y, pstr);
}

void lcd_lib_draw_string_center_at(int16_t x, int16_t y, const char* pstr)
{
    lcd_lib_draw_string(x - strlen(pstr) * 3, y, pstr);
}

void lcd_lib_clear_string_center_atP(int16_t x, int16_t y, const char* pstr)
{
  lcd_lib_clear_stringP(x - strlen_P(pstr) * 3, y, pstr);
}

void lcd_lib_move_point(uint8_t xDst, uint8_t yDst, uint8_t xSrc, uint8_t ySrc)
{
    uint8_t ySrcOffset=ySrc%8;
    int8_t maskErr=yDst%8-ySrcOffset;
    int8_t maskSrc=0x01<<ySrcOffset;

    
    uint8_t* dst = lcd_buffer + (yDst / 8) * LCD_GFX_WIDTH + xDst;
    uint8_t* src = lcd_buffer + (ySrc / 8) * LCD_GFX_WIDTH + xSrc;
    
    if (maskErr<0) {
        maskErr=-maskErr;
        *dst |= (*src & (maskSrc))>>(maskErr);
    }
    else{
        *dst |= (*src & (maskSrc))<<(maskErr);
    }
    *src &= ~maskSrc;
}

void lcd_lib_remove_point(uint8_t xSrc, uint8_t ySrc)
{
    int8_t maskSrc=0x01<<(ySrc%8);

    uint8_t* src = lcd_buffer + (ySrc / 8) * LCD_GFX_WIDTH + xSrc;
    
    *src &= ~maskSrc;
}



void lcd_lib_copy_hline(int16_t yDst, int16_t ySrc)
{
    
    if (yDst>=LCD_GFX_HEIGHT) {
        yDst=LCD_GFX_HEIGHT-1;
    }
    
    if (yDst<0) {
        yDst=0;
    }

    
    uint8_t* src = lcd_buffer + (ySrc / 8) * LCD_GFX_WIDTH;
    uint8_t maskSrc = 0x01 << (ySrc % 8);
    uint8_t* dst = lcd_buffer + (yDst / 8) * LCD_GFX_WIDTH;
    int8_t maskErr = (yDst % 8) - (ySrc % 8);
    
    if (maskErr>=0) {
        for (int i=0; i<128; i++) {
            *dst |= (*src & maskSrc)<<(maskErr);
            *src &= ~maskSrc;
            src++;
            dst++;
        }
    }
    else{
        maskErr=-maskErr;
        for (int j=0; j<128; j++) {
            *dst |= (*src & maskSrc)>>(maskErr);
            *src &= ~maskSrc;
            src++;
            dst++;
        }
    }
}


void lcd_lib_draw_hline(int16_t x0, int16_t x1, int16_t y)
{
    if (y>=LCD_GFX_HEIGHT || y<0 || x0>=LCD_GFX_WIDTH ||x1<0) {
        return;
    }
    if (x0<0) {
        x0=0;
    }
    if (x1>=LCD_GFX_WIDTH) {
        x1=LCD_GFX_WIDTH-1;
    }

    uint8_t* dst = lcd_buffer + x0 + (y / 8) * LCD_GFX_WIDTH;
    uint8_t mask = 0x01 << (y % 8);
    
    while(x0 <= x1)
    {
        *dst++ |= mask;
        x0 ++;
    }
}

void lcd_lib_draw_vline(int16_t x, int16_t y0, int16_t y1)
{
    if (x>=LCD_GFX_WIDTH || x<0 || y0>=LCD_GFX_HEIGHT ||y1<0) {
        return;
    }
    if (y0<0) {
        y0=0;
    }
    if (y1>=LCD_GFX_HEIGHT) {
        y1=LCD_GFX_HEIGHT-1;
    }
    
    uint8_t* dst0 = lcd_buffer + x + (y0 / 8) * LCD_GFX_WIDTH;
    uint8_t* dst1 = lcd_buffer + x + (y1 / 8) * LCD_GFX_WIDTH;
    if (dst0 == dst1)
    {
        *dst0 |= (0xFF << (y0 % 8)) & (0xFF >> (7 - (y1 % 8)));
    }else{
        *dst0 |= 0xFF << (y0 % 8);
        dst0 += LCD_GFX_WIDTH;
        while(dst0 != dst1)
        {
            *dst0 = 0xFF;
            dst0 += LCD_GFX_WIDTH;
        }
        *dst1 |= 0xFF >> (7 - (y1 % 8));
    }
}

void lcd_lib_draw_box(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
    lcd_lib_draw_vline(x0, y0+1, y1-1);
    lcd_lib_draw_vline(x1, y0+1, y1-1);
    lcd_lib_draw_hline(x0+1, x1-1, y0);
    lcd_lib_draw_hline(x0+1, x1-1, y1);
}

void lcd_lib_draw_shade(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
    uint8_t* dst0 = lcd_buffer + x0 + (y0 / 8) * LCD_GFX_WIDTH;
    uint8_t* dst1 = lcd_buffer + x0 + (y1 / 8) * LCD_GFX_WIDTH;
    if (dst0 == dst1)
    {
        //uint8_t mask = (0xFF << (y0 % 8)) & (0xFF >> (7 - (y1 % 8)));
        //*dstA0 |= (mask & 0xEE);
    }else{
        uint8_t mask = 0xFF << (y0 % 8);
        uint8_t* dst = dst0;
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ |= mask & ((x & 1) ? 0xAA : 0x55);
        dst0 += LCD_GFX_WIDTH;
        while(dst0 != dst1)
        {
            dst = dst0;
            for(uint8_t x=x0; x<=x1; x++)
                *dst++ |= (x & 1) ? 0xAA : 0x55;
            dst0 += LCD_GFX_WIDTH;
        }
        dst = dst1;
        mask = 0xFF >> (7 - (y1 % 8));
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ |= mask & ((x & 1) ? 0xAA : 0x55);
    }
}

void lcd_lib_clear()
{
    memset(lcd_buffer, 0, sizeof(lcd_buffer));
}

void lcd_lib_set()
{
    memset(lcd_buffer, 0xFF, sizeof(lcd_buffer));
}

void lcd_lib_clear(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
    if (x1<0 || y1<0 || x0>=LCD_GFX_WIDTH || y0>=LCD_GFX_HEIGHT) {
        return;
    }
    if (x0<0) {
        x0=0;
    }
    if (y0<0) {
        y0=0;
    }
    if (x1>=LCD_GFX_WIDTH) {
        x1=LCD_GFX_WIDTH-1;
    }
    if (y1>=LCD_GFX_HEIGHT) {
        y1=LCD_GFX_HEIGHT-1;
    }
    
    uint8_t* dst0 = lcd_buffer + x0 + (y0 / 8) * LCD_GFX_WIDTH;
    uint8_t* dst1 = lcd_buffer + x0 + (y1 / 8) * LCD_GFX_WIDTH;
    if (dst0 == dst1)
    {
        uint8_t mask = (0xFF << (y0 % 8)) & (0xFF >> (7 - (y1 % 8)));
        for(uint8_t x=x0; x<=x1; x++)
            *dst0++ &=~mask;
    }else{
        uint8_t mask = 0xFF << (y0 % 8);
        uint8_t* dst = dst0;
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ &=~mask;
        dst0 += LCD_GFX_WIDTH;
        while(dst0 != dst1)
        {
            dst = dst0;
            for(uint8_t x=x0; x<=x1; x++)
                *dst++ = 0x00;
            dst0 += LCD_GFX_WIDTH;
        }
        dst = dst1;
        mask = 0xFF >> (7 - (y1 % 8));
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ &=~mask;
    }
}

void lcd_lib_invert(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
    if (x1<0 || y1<0 || x0>=LCD_GFX_WIDTH || y0>=LCD_GFX_HEIGHT) {
        return;
    }
    if (x0<0) {
        x0=0;
    }
    if (y0<0) {
        y0=0;
    }
    if (x1>=LCD_GFX_WIDTH) {
        x1=LCD_GFX_WIDTH-1;
    }
    if (y1>=LCD_GFX_HEIGHT) {
        y1=LCD_GFX_HEIGHT-1;
    }
    uint8_t* dst0 = lcd_buffer + x0 + (y0 / 8) * LCD_GFX_WIDTH;
    uint8_t* dst1 = lcd_buffer + x0 + (y1 / 8) * LCD_GFX_WIDTH;
    if (dst0 == dst1)
    {
        uint8_t mask = (0xFF << (y0 % 8)) & (0xFF >> (7 - (y1 % 8)));
        for(uint8_t x=x0; x<=x1; x++)
            *dst0++ ^= mask;
    }else{
        uint8_t mask = 0xFF << (y0 % 8);
        uint8_t* dst = dst0;
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ ^= mask;
        dst0 += LCD_GFX_WIDTH;
        while(dst0 != dst1)
        {
            dst = dst0;
            for(uint8_t x=x0; x<=x1; x++)
                *dst++ ^= 0xFF;
            dst0 += LCD_GFX_WIDTH;
        }
        dst = dst1;
        mask = 0xFF >> (7 - (y1 % 8));
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ ^= mask;
    }
}

void lcd_lib_set(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
    if (x1<0 || y1<0 || x0>=LCD_GFX_WIDTH || y0>=LCD_GFX_HEIGHT) {
        return;
    }
    if (x0<0) {
        x0=0;
    }
    if (y0<0) {
        y0=0;
    }
    if (x1>=LCD_GFX_WIDTH) {
        x1=LCD_GFX_WIDTH-1;
    }
    if (y1>=LCD_GFX_HEIGHT) {
        y1=LCD_GFX_HEIGHT-1;
    }
    uint8_t* dst0 = lcd_buffer + x0 + (y0 / 8) * LCD_GFX_WIDTH;
    uint8_t* dst1 = lcd_buffer + x0 + (y1 / 8) * LCD_GFX_WIDTH;
    if (dst0 == dst1)
    {
        uint8_t mask = (0xFF << (y0 % 8)) & (0xFF >> (7 - (y1 % 8)));
        for(uint8_t x=x0; x<=x1; x++)
            *dst0++ |= mask;
    }else{
        uint8_t mask = 0xFF << (y0 % 8);
        uint8_t* dst = dst0;
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ |= mask;
        dst0 += LCD_GFX_WIDTH;
        while(dst0 != dst1)
        {
            dst = dst0;
            for(uint8_t x=x0; x<=x1; x++)
                *dst++ = 0xFF;
            dst0 += LCD_GFX_WIDTH;
        }
        dst = dst1;
        mask = 0xFF >> (7 - (y1 % 8));
        for(uint8_t x=x0; x<=x1; x++)
            *dst++ |= mask;
    }
}

void lcd_lib_draw_gfx(int16_t x, int16_t y, const uint8_t* gfx)
{
    uint8_t w = pgm_read_byte(gfx++);
    uint8_t h = (pgm_read_byte(gfx++) + 7) / 8;
    uint8_t shift = y % 8;
    uint8_t shift2 = 8 - shift;
    y /= 8;
    
    for(; h; h--)
    {
        if (y >= LCD_GFX_HEIGHT / 8) break;
        
        uint8_t* dst0 = lcd_buffer + x + y * LCD_GFX_WIDTH;
        uint8_t* dst1 = lcd_buffer + x + y * LCD_GFX_WIDTH + LCD_GFX_WIDTH;
        for(uint8_t _w = w; _w; _w--)
        {
            uint8_t c = pgm_read_byte(gfx++);
            *dst0++ |= c << shift;
            if (shift && y < 7)
                *dst1++ |= c >> shift2;
        }
        y++;
    }
}

void lcd_lib_clear_gfx(int16_t x, int16_t y, const uint8_t* gfx)
{
    uint8_t w = pgm_read_byte(gfx++);
    uint8_t h = (pgm_read_byte(gfx++) + 7) / 8;
    uint8_t shift = y % 8;
    uint8_t shift2 = 8 - shift;
    y /= 8;
    
    for(; h; h--)
    {
        if (y >= LCD_GFX_HEIGHT / 8) break;
        
        uint8_t* dst0 = lcd_buffer + x + y * LCD_GFX_WIDTH;
        uint8_t* dst1 = lcd_buffer + x + y * LCD_GFX_WIDTH + LCD_GFX_WIDTH;
        for(uint8_t _w = w; _w; _w--)
        {
            uint8_t c = pgm_read_byte(gfx++);
            *dst0++ &=~(c << shift);
            if (shift && y < 7)
                *dst1++ &=~(c >> shift2);
        }
        y++;
    }
}

//  #define LCDDetailY  52


void lcd_lib_move_horizontal(int16_t x)
{

    uint8_t LCDDetailY = LS(52, 49, 49);
    uint8_t* dst0;  //source
    uint8_t* dst1;  //destination
    uint8_t y;
    uint8_t mask = 0xff>>(7-(LCDDetailY%8));
    int16_t i;
    
    if (x==0) {
        return;
    }
    
    if (x<=-LCD_GFX_WIDTH || x>=LCD_GFX_WIDTH) {
        lcd_lib_clear(0, 0, LCD_GFX_WIDTH, LCDDetailY);
        return;
    }

    
        if (x>0) {
            
            for (y=0; y<((LCDDetailY+1)/8); y++) {
//              dst0 = lcd_buffer + LCD_GFX_WIDTH - x + y * LCD_GFX_WIDTH;
                dst1 = lcd_buffer + LCD_GFX_WIDTH -1 + y * LCD_GFX_WIDTH;
                dst0 = dst1-x;
                
                for (i=x; i < LCD_GFX_WIDTH; i++) {
                    *dst1=*dst0;
                    dst0--;
                    dst1--;
                }
            }
            
            if (mask != 0xff) {
                dst1 = lcd_buffer + LCD_GFX_WIDTH-1 + y * LCD_GFX_WIDTH;
                dst0 = dst1-x;
                
                for (int16_t i=x; i < LCD_GFX_WIDTH; i++) {
                    *dst1 &= ~mask;
                    *dst1 |= (*dst0) & mask;
                    dst0--;
                    dst1--;
                }
            }
        }
        else{
            for (y=0; y<((LCDDetailY+1)/8); y++) {

    //            dst0 = lcd_buffer - x + y * LCD_GFX_WIDTH;
                dst1 = lcd_buffer + y * LCD_GFX_WIDTH;
                dst0 = dst1-x;
                
                for (i=x; i > -LCD_GFX_WIDTH; i--) {
                    *dst1=*dst0;
                    dst0++;
                    dst1++;
                }
            }
            
            if (mask != 0xff) {
                dst1 = lcd_buffer + y * LCD_GFX_WIDTH;
                dst0 = dst1-x;
                
                for (i=x; i > -LCD_GFX_WIDTH; i--) {
                    *dst1 &= ~mask;
                    *dst1 |= (*dst0) & mask;
                    dst0++;
                    dst1++;
                }
            }
        }
    if (x>0) {
        lcd_lib_clear(0, 0, x, LCDDetailY);
    }
    else{
        lcd_lib_clear(LCD_GFX_WIDTH+x, 0, LCD_GFX_WIDTH-1, LCDDetailY);
    }
}

void lcd_lib_move_vertical(int16_t y)
{

    uint8_t LCDDetailY = LS(52, 49, 49);
    uint8_t* dst0;  //source
    uint8_t* dst1;  //destination
    uint8_t* dst2;  //source
    uint8_t mask = 0xff>>(7-(LCDDetailY%8));
    uint8_t sourceBuf;

    int i;
    
    if (y==0) {
        return;
    }
    
    if (y<-LCDDetailY || y>LCDDetailY) {
        lcd_lib_clear(0, 0, LCD_GFX_WIDTH, LCDDetailY);
        return;
    }

    uint16_t yMoveSteps;
    uint8_t yShortOffset;
    
    
    if (y>0) {

        
        yShortOffset=y%8;
        
        if (mask != 0xff) {
            
            dst1=lcd_buffer+(LCD_GFX_WIDTH * ((LCDDetailY+1) / 8 + 1) - 1);       //The raw of the split by LCDDetailY
            dst0=dst1-(y/8)*LCD_GFX_WIDTH;
            dst2=dst0-LCD_GFX_WIDTH;
            
            for (i=0; i<LCD_GFX_WIDTH; i++) {

                sourceBuf =((*dst0)<<yShortOffset)|((*dst2)>>(8-yShortOffset));
                
                *dst1 &= ~mask;
                *dst1 |= (sourceBuf) & mask;
                dst0--;
                dst1--;
                dst2--;
            }

        }
        
        
        dst1=lcd_buffer+(LCD_GFX_WIDTH * ((LCDDetailY+1) / 8) - 1);
        dst0=dst1-(y/8)*LCD_GFX_WIDTH;
        dst2=dst0-LCD_GFX_WIDTH;
        
        yMoveSteps=((LCDDetailY+1)/8-y/8)*LCD_GFX_WIDTH;
        for (i=0; i<yMoveSteps; i++) {
            *dst1=((*dst0)<<yShortOffset)|((*dst2)>>(8-yShortOffset));
            dst0--;
            dst1--;
            dst2--;
        }
//        SERIAL_ECHOLN(freeMemory());
        lcd_lib_clear(0, 0, LCD_GFX_WIDTH-1, y-1);
    }
    else{
        y=-y;
        yShortOffset=y%8;
        
        dst1=lcd_buffer;
        dst0=lcd_buffer+(y/8)*LCD_GFX_WIDTH;
        dst2=dst0+LCD_GFX_WIDTH;
        
        yMoveSteps=((LCDDetailY+1)/8-y/8)*LCD_GFX_WIDTH;
        for (i=0; i<yMoveSteps; i++) {
            *dst1= ((*dst0)>>yShortOffset) | ((*dst2)<<(8-yShortOffset));
            dst0++;
            dst1++;
            dst2++;
        }
        
        if (mask != 0xff) {
            if (y/8==0) {
                dst1=lcd_buffer+LCD_GFX_WIDTH * ((LCDDetailY+1) / 8);       //The raw of the split by LCDDetailY
                dst0=dst1+y/8*LCD_GFX_WIDTH;
                dst2=dst0+LCD_GFX_WIDTH;
                
                for (i=0; i<LCD_GFX_WIDTH; i++) {

                    sourceBuf =((*dst0)>>yShortOffset)|((*dst2)<<(8-yShortOffset));
                    
                    *dst1 &= ~mask;
                    *dst1 |= (sourceBuf) & mask;
                    dst0++;
                    dst1++;
                    dst2++;
                }
            }
        }
        
        
        lcd_lib_clear(0, (LCDDetailY+1)-y, LCD_GFX_WIDTH-1, LCDDetailY);
    }
}

void lcd_lib_beep()
{
//#define _BEEP(c, n) for(int8_t _i=0;_i<c;_i++) { WRITE(BEEPER, HIGH); _delay_us(n); WRITE(BEEPER, LOW); _delay_us(n); }
//    _BEEP(20, 366);
//    _BEEP(10, 150);
//#undef _BEEP
    
    beepType=beepTypePress;
    
}

int16_t lcd_lib_encoder_pos_interrupt = 0;

int16_t lcd_lib_encoder_pos = 0;
bool lcd_lib_button_pressed = false;
bool lcd_lib_button_down;



bool lcd_lib_button_up_down_reversed=false;
  #define ENCODER_ROTARY_BIT_0 _BV(0)
  #define ENCODER_ROTARY_BIT_1 _BV(1)
/* Warning: This function is called from interrupt context */
void lcd_lib_buttons_update_interrupt()
{
  static uint16_t pushButtonUpTimer=0;
  static uint16_t pushButtonDownTimer=0;

  bool isUp = !READ(PushButtonUp);
  bool isEnter = !READ(PushButtonEnter);
  bool isDown = !READ(PushButtonDown);

  if (isUp) {
    pushButtonUpTimer++;
    
    if (pushButtonUpTimer == 2) {
      lcd_lib_encoder_pos_interrupt--;
    }
    
    if (pushButtonUpTimer >= 500>>5) {
      if ((pushButtonUpTimer & (0x007f>>5))==0x0000) {
        lcd_lib_encoder_pos_interrupt--;
      }
      if (pushButtonUpTimer >= 3000>>5) {
        if ((pushButtonUpTimer & (0x003f>>5))==0x0000) {
          lcd_lib_encoder_pos_interrupt--;
        }
        if (pushButtonUpTimer >= 6000>>5) {
          lcd_lib_encoder_pos_interrupt--;
        }
      }
    }
  }
  else{
    pushButtonUpTimer=0;
  }


  if ((Device_isNewPCB && isDown && !isEnter && !isUp)||(!Device_isNewPCB && isDown)) {
    pushButtonDownTimer++;
    
    if (pushButtonDownTimer == 2) {
      lcd_lib_encoder_pos_interrupt++;
    }
    
    if (pushButtonDownTimer >= 500>>5) {
      if ((pushButtonDownTimer & (0x007f>>5))==0x0000) {
        lcd_lib_encoder_pos_interrupt++;
      }
      
      if (pushButtonDownTimer >= 3000>>5) {
        if ((pushButtonDownTimer & (0x003f>>5))==0x0000) {
          lcd_lib_encoder_pos_interrupt++;
        }
        if (pushButtonDownTimer >= 6000>>5) {
          lcd_lib_encoder_pos_interrupt++;
        }
      }
    }
  }
  else{
    pushButtonDownTimer=0;
  }

}

void lcd_lib_buttons_update()
{
  uint8_t buttonState = !READ(PushButtonEnter);

    lcd_lib_button_pressed = (buttonState && !lcd_lib_button_down);
    lcd_lib_button_down = buttonState;
    
    if ((lcd_lib_encoder_pos_interrupt || lcd_lib_button_pressed) && beepType!=beepTypeNormal) {
      beepType=beepTypePress;
      powerOnDemandEnergyTimer=millis();
    }
    if (lcd_lib_button_up_down_reversed) {
        lcd_lib_encoder_pos -= lcd_lib_encoder_pos_interrupt;
    }
    else{
        lcd_lib_encoder_pos += lcd_lib_encoder_pos_interrupt;
    }
    
    lcd_lib_encoder_pos_interrupt = 0;

}

char* int_to_string(int i, char* temp_buffer, const char* p_postfix)
{
  itoa(i, temp_buffer, 10);
  temp_buffer += strlen(temp_buffer);

  if (p_postfix)
  {
    strcpy_P(temp_buffer, p_postfix);
    temp_buffer += strlen_P(p_postfix);
  }
  return temp_buffer;
}

char* int_to_time_string(unsigned long i, char* temp_buffer)
{
    char* c = temp_buffer;
    uint8_t hours = (i / 60 / 60) % 60;
    uint8_t mins = (i / 60) % 60;
    uint8_t secs = i % 60;
  
  
    if (hours > 99)
    *c++ = '0' + hours / 100;
    *c++ = '0' + (hours / 10) % 10;
    *c++ = '0' + hours % 10;
    *c++ = ':';
    *c++ = '0' + mins / 10;
    *c++ = '0' + mins % 10;
    *c++ = ':';
    *c++ = '0' + secs / 10;
    *c++ = '0' + secs % 10;
    *c = '\0';
    return c;

}

char* float_to_string(float f, char* temp_buffer, const char* p_postfix)
{
  dtostrf(f, 0, 2, temp_buffer);
  temp_buffer += strlen(temp_buffer);
  if (p_postfix)
  {
    strcpy_P(temp_buffer, p_postfix);
    temp_buffer += strlen_P(p_postfix);
  }
  return temp_buffer;
}

#endif//ENABLE_ULTILCD2
